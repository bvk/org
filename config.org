#+TITLE: Config in Org-Mode

This is an experiment to configure my systems using a single, org-publish
command.

Normally, I have a git repo with configuration files for all tools, but I have
to manually setup the symlinks to their respective dot files.

See [[https://emacs.stackexchange.com/questions/24645/exporting-and-tangling-simultaneously-in-org-mode][How to Publish using org-mode]]

* Background Notes
** Executing bash code blocks in this file.

The following emacs-lisp config adds shell scripts to the list of code
block types enabled for /org-babel-execute/ mechanism.

#+BEGIN_SRC emacs-lisp :results none
(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)))
#+END_SRC

The following example illustrates how to define a bash code block to
run under ~sudo~ context with the ~org-babel-execute-src-block~
function. A shell session is opened in a buffer named ~*example*~ and
commands in the code block are executed sequentially.

#+BEGIN_SRC bash :dir /sudo:: :results none :session *example*
pwd
whoami
#+END_SRC

* Packages

We can install all the following commands in one go by running
~org-babel-execute-src-block~ with the cursor anywhere in the
block. All commands will run in a single bash session, which can be
seen in the buffer named ~*apt-get*~.

#+BEGIN_SRC bash :dir /sudo:: :results none :session *apt-get*
apt-get install -y build-essential
apt-get install -y golang-go
apt-get install -y git

apt-get install -y screen

apt-get install -y xserver-xorg xserver-xephyr dwm
apt-get install -y xdg-utils

apt-get install -y feh
apt-get install -y stterm
apt-get install -y suckless-tools

apt-get install -y eog
apt-get install -y firefox
#+END_SRC

** Install the latest Golang version and tools

#+BEGIN_SRC bash :results none :session *go1.19*
go install golang.org/dl/go1.19@latest
go1.19 download
#+END_SRC

#+BEGIN_SRC bash :results none :session *go-tools*
go1.19 install golang.org/x/tools/gopls@latest
go1.19 install golang.org/x/tools/cmd/goimports@latest
go1.19 install golang.org/x/tools/cmd/guru@latest
#+END_SRC

* Dot Files

	We setup all dot files (and directories) here. All codeblocks are configured
	with org-babel-tangle target, so when users run org-babel-tangle command it
	will overwrite the existing dot files.

** =~/.environment=

#+BEGIN_SRC text :tangle ~/.environment
HOSTNAME=$(hostname -s)
export HOSTNAME
#+END_SRC

#+BEGIN_SRC bash :tangle ~/.environment
# Eternal bash history.
# ---------------------
# Undocumented feature which sets the size to "unlimited".
# http://stackoverflow.com/questions/9457233/unlimited-bash-history
export HISTFILESIZE=
export HISTSIZE=
export HISTTIMEFORMAT="[%F %T] "
# Change the file location because certain bash sessions truncate .bash_history file upon close.
# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
export HISTFILE=~/.bash_eternal_history
# Force prompt to write history after every command.
# http://superuser.com/questions/20900/bash-history-loss
PROMPT_COMMAND="history -a; $PROMPT_COMMAND"
#+END_SRC

** =~/.gnupg=

#+BEGIN_SRC text :mkdirp yes :tangle ~/.gnupg/gpg-agent.conf
default-cache-ttl 120
max-cache-ttl 600

enable-ssh-support

allow-emacs-pinentry
allow-loopback-entry
#+END_SRC

** =~/.bashrc=

We include the standard Debian ~.bashrc~ content first and then
override it with our customization. This will ensure that we get a
familiar environment before the customization.

#+BEGIN_SRC bash :tangle ~/.bashrc
if test -f /etc/skel/.bashrc; then
    source /etc/skel/.bashrc
fi
#+END_SRC

#+BEGIN_SRC bash :tangle ~/.bashrc
if test -f $HOME/.environment; then
    source $HOME/.environment
fi
if test -f $HOME/.environment-$HOSTNAME; then
    source $HOME/.environment-$HOSTNAME
fi
#+END_SRC

** =~/.bash_profile=

Make the login shell also read ~~/.bashrc~ file.

#+BEGIN_SRC bash :tangle ~/.bash_profile
if test -f $HOME/.bashrc; then
    . $HOME/.bashrc
fi
#+END_SRC

** =~/.bash_login=

Make the login shell also read ~~/.bashrc~ file.

#+BEGIN_SRC bash :tangle ~/.bash_profile
if test -f $HOME/.bashrc; then
    . $HOME/.bashrc
fi
#+END_SRC

*** Override system binaries with user binaries

#+BEGIN_SRC bash :tangle ~/.bashrc
if ! test -d $HOME/bin; then
    mkdir $HOME/bin
fi

if ! test -d $HOME/go/bin; then
    mkdir -p $HOME/go/bin
fi

export PATH=$HOME/bin:$HOME/go/bin:$PATH
#+END_SRC

*** Aliases for bitcoin cash binaries

    These values are only meant for the milk server where bitcoin data
    directory really exists.

   #+BEGIN_SRC bash :tangle ~/.bashrc
   if test -d /localzpool/bch-bchn -a -d $HOME/tools/bitcoin-cash-node; then
       alias bitcoind-bchn='$HOME/tools/bitcoin-cash-node/bin/bitcoind -datadir=/localzpool/bch-bchn'
       alias bitcoin-cli-bchn='$HOME/tools/bitcoin-cash-node/bin/bitcoin-cli -datadir=/localzpool/bch-bchn'
   fi

   if test -d /localzpool/bch-abc -a -d $HOME/tools/bitcoin-abc; then
       alias bitcoind-abc='$HOME/tools/bitcoin-abc/bin/bitcoind -datadir=/localzpool/bch-abc'
       alias bitcoin-cli-abc='$HOME/tools/bitcoin-abc/bin/bitcoin-cli -datadir=/localzpool/bch-abc'
   fi
   #+END_SRC

** =~/.screenrc=

	 Include the default screen configuration from /etc/screenrc file and override
	 it with our customizations.

	 #+BEGIN_SRC text :tangle ~/.screenrc
   source /etc/screenrc
	 #+END_SRC

*** Don't display startup screen

	  #+BEGIN_SRC text :tangle ~/.screenrc
    startup_message off
	  #+END_SRC

*** Pick a large scrollback history

	  #+BEGIN_SRC text :tangle ~/.screenrc
    defscrollback 50000
	  #+END_SRC

*** Set the escape key to =C-z=

    The default escape key =C-a= is important in the sheel, so use something
    else.

	  #+BEGIN_SRC text :tangle ~/.screenrc
    escape 
	  #+END_SRC

*** Remove terminal control-flow bindings

    Terminal control-flow bindings =C-s= and =C-q= cause random lockups. They
	  are not really useful.

	  #+BEGIN_SRC text :tangle ~/.screenrc
    bind s
    bind ^s
    bind q
    bind ^q
	  #+END_SRC

*** Enable =Shift-PageUp= and =Shift-PageDown= keys

    #+BEGIN_SRC text :tangle ~/.screenrc
    termcapinfo xterm|xterms|xs|rxvt ti@:te@
    #+END_SRC

*** Always force using a 256 color terminal

	  #+BEGIN_SRC text :tangle ~/.screenrc
    term xterm-256color
	  #+END_SRC

*** Start first window at 1

    Start the shell in interactive-mode which reads my =~/.bashrc=
    customizations.

	  #+BEGIN_SRC text :tangle ~/.screenrc
    screen -t shell 1 /bin/bash
	  #+END_SRC

** X11 Wallpaper                                                     :ATTACH:
:PROPERTIES:
:ID:       703c8927-19e5-44c6-97ae-aa196344751f
:END:

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/my-org-publish.el
(when (require 'ox-publish nil 'noerror)
  (add-to-list 'org-publish-project-alist
               '("publish-wallpaper"
                 :base-directory "~/org/wallpaper"
                 :exclude ".*"
                 :include ["blank.jpg"]
                 :recursive nil
                 :publishing-directory "~/.wallpaper/"
                 :publishing-function org-publish-attachment)))
#+END_SRC

We can run =emacsclient -e '(org-publish "publish-wallpaper" t)'=
command to create the wallpaper file at =~/.wallpaper/blank.jpg=.

** =~/.fonts= directory                                              :ATTACH:
:PROPERTIES:
:ID:       d89df2d5-632b-41d8-b6b9-cc1107599d9e
:DIR:      ~/org/fonts
:END:

We want to create a =~/.fonts= directory with custom font files. We
use org-mode attachments to store the font files and use org-publish
project to copy them into the =~/.fonts= directory.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/my-org-publish.el
(when (require 'ox-publish nil 'noerror)
  (add-to-list 'org-publish-project-alist
               '("publish-fonts"
                 :base-directory "~/org/fonts"
                 :base-extension "ttf"
                 :recursive nil
                 :publishing-directory "~/.fonts/"
                 :publishing-function org-publish-attachment)))
#+END_SRC

We can run =emacsclient -e '(org-publish "publish-fonts" t)'= to copy
Ubuntu fonts into the =~/.fonts= directory.

** =~/.ssh/config=

   1. Milk server uses static ip.

	 #+BEGIN_SRC text :mkdirp yes :tangle ~/.ssh/config
   Host milk-home
     HostName 192.168.0.10
     User bvk
	 #+END_SRC

** =~/.ssh/authorized_keys=

Steam public key

#+BEGIN_SRC text :mkdirp yes :tangle ~/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCWTvx3XZFM9YVgxS+aDJ6gZBJR/BFec0/C8yYgBI+G0KMttHOxXuFJJ+UNtufcuPUAqe0vepDWh4bz4dimE4iDWnC5G0LJ71b8YVewtvEu5xSOmjRE38ozCfN0fwLsSvQqUaqlNexpiN+lcDL1UeKXFWzTMp8kE6WEnE7AXUk1Srl5eB0SaQz1ULp7alcq+6T+eySTEvRBzEzZQEK/ToWp8MnRjG09pitCGwnoa2OCDkNPhpUus7RlPhVlCBOjX/D74UcgVUG225sOMCsmqDK+5Y1XJgw3AHGL+9i31gc5U5FyewNHbV3LTmeOoGE2VjbfGDTsSP/i/T7F4LWLMhYL bvk@steam
#+END_SRC

** =~/.gtkrc-2.0=

#+BEGIN_SRC text :mkdirp yes :tangle ~/.gtkrc-2.0
# Get firefox to use emacs keybindings
include "/usr/share/themes/Emacs/gtk-2.0-key/gtkrc"
gtk-key-theme-name = "Emacs"
#+END_SRC

** =~/.config/gtk-3.0/settings.ini=

#+BEGIN_SRC text :mkdirp yes :tangle ~/.config/gtk-3.0/settings.ini
# Get firefox to use emacs keybindings
[Settings]
gtk-key-theme-name = Emacs
#+END_SRC

* Emacs
** Editing config
#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-editing.el
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)
(setq show-trailing-whitespace t)

(setq select-enable-primary t)
(setq select-enable-clipboard t)

(defalias 'yes-or-no-p 'y-or-n-p)

(ido-mode t)
(setq visible-bell t)

(show-paren-mode 1)
(column-number-mode 1)
(blink-cursor-mode 0)
(display-time-mode 1)

(menu-bar-mode 0)
(tooltip-mode nil)
(add-to-list 'default-frame-alist '(right-fringe . 0))
(add-to-list 'default-frame-alist '(cursor-color . "green"))

(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; emacs-nox has no scroll-bar-mode
(when (functionp 'scroll-bar-mode)
  (scroll-bar-mode 0))
;; emacs-nox has no tool-bar-mode
(when (functionp 'tool-bar-mode)
  (tool-bar-mode 0))

(when (require 'uniquify nil 'noerror)
  (setq uniquify-buffer-name-style 'forward))

(when (require 'org nil 'noerror)
  (setq org-edit-src-content-indentation 0))
#+END_SRC

** Frame font
#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-fonts.el
(defvar my-font-size 12 "Initial font size for the frames")
(defvar my-font-step-size 2 "Font increment/decrement size")

(defun my-font-name (size)
  "Returns the font name for the given size."
  (format "Ubuntu Mono-%d:hintstyle=hintslight:rgba=rgb" size))
(defun my-variable-font-name (size)
  "Returns the variable-pitch font name for the given size."
  (format "Ubuntu-%d:hintstyle=hintslight:rgba=rgb" size))

(defun my-font-increase ()
  "Updates the frame font with a larger font size."
  (interactive)
  (progn (setq my-font-size (+ my-font-size my-font-step-size))
         (set-face-font 'default (my-font-name my-font-size))
         (set-face-font 'fixed-pitch (my-font-name my-font-size))
         (set-face-font 'variable-pitch (my-variable-font-name my-font-size))
         (set-frame-font (my-font-name my-font-size) nil t t)))

(defun my-font-decrease ()
  "Updates the frame font with a smaller font size."
  (interactive)
  (progn (setq my-font-size (- my-font-size my-font-step-size))
         (set-face-font 'default (my-font-name my-font-size))
         (set-face-font 'fixed-pitch (my-font-name my-font-size))
         (set-face-font 'variable-pitch (my-variable-font-name my-font-size))
         (set-frame-font (my-font-name my-font-size) nil t t)))

(set-face-font 'default (my-font-name my-font-size))
(set-face-font 'fixed-pitch (my-font-name my-font-size))
(set-face-font 'variable-pitch (my-variable-font-name my-font-size))

#+END_SRC

** Shell Search PATH

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-shell-env.el
;; Prepend ~/bin and ~/go/bin to the emacs PATH environment variable.
(setenv "PATH"
        (concat (getenv "HOME") "/bin" ":"
                (getenv "HOME") "/go/bin" ":"
                (getenv "PATH")))
;; Emacs uses exec-path instead of the PATH
(setq exec-path (split-string (getenv "PATH") ":"))

;; Also, update the tramp-default-remote-path.
(setq tramp-default-remote-path "~/bin:~/go/bin:/bin:/usr/bin")
#+END_SRC

** GnuPG and Passwords config
#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-gpg.el
(setq auth-source-debug t)
(setq auth-sources '("~/.authinfo.gpg"))

(setenv "GPG_AGENT_INFO" nil)
(setenv "INSIDE_EMACS" (format "%s,comint" emacs-version))

(unless (package-installed-p 'pinentry)
  (package-install 'pinentry))
(require 'pinentry)
(pinentry-start)

(require 'epa-file)
(epa-file-enable)
(setq epg-pinentry-mode 'loopback)
#+END_SRC

** Emacs Package Repositories

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-emacs-repos.el
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(setq package-enable-at-starup nil)
(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(use-package delight :ensure t)
(use-package use-package-ensure-system-package :ensure t)
#+END_SRC

** Email with Mu4e
#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-email.el
(if (file-exists-p "/usr/share/emacs/site-lisp/mu4e")
    (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e"))

(when (require 'mu4e nil 'noerror)
  (require 'smtpmail)

  ;; Allow for updating mail using 'U' in the main view.
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-maildir "~/Mail")

  ;; Display options
  (setq mu4e-view-show-addresses 't)
  (setq mu4e-attachment-dir "~/Mail/Downloads")

  ;; Composing mail
  (setq mu4e-compose-dont-reply-to-self t)
  ;; Don't keep message buffers around
  (setq message-kill-buffer-on-exit t)

  ;; Use mu4e for sending e-mail
  (setq mail-user-agent 'mu4e-user-agent)
  (setq message-send-mail-function 'smtpmail-send-it)
  (setq smtpmail-smtp-server "smtp.gmail.com")
  (setq smtpmail-smtp-service 587)

  ;; Make sure that moving a message (like to Trash) causes the
  ;; message to get a new file name.  This helps to avoid the
  ;; dreaded "UID is N beyond highest assigned" error.
  ;; See this link for more info: https://stackoverflow.com/a/43461973
  (setq mu4e-change-filenames-when-moving t)

  ;; Set up contexts for email accounts
  (setq mu4e-contexts
        `(,(make-mu4e-context
            :name "bvkchaitanya@gmail"
            :match-func (lambda (msg)
                          (when msg
                            (string-prefix-p "/bvkchaitanya@gmail.com"
                                             (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "bvkchaitanya@gmail.com")
                    (mu4e-trash-folder . "/bvkchaitanya@gmail.com/Trash")
                    (mu4e-drafts-folder . "/bvkchaitanya@gmail.com/Drafts")
                    (mu4e-refile-folder . "/bvkchaitanya@gmail.com/Archive")
                    (mu4e-sent-messages-behavior . 'delete)))
          ,(make-mu4e-context
            :name "bvk.other@gmail"
            :match-func (lambda (msg)
                          (when msg
                            (string-prefix-p "/bvkother@gmail.com"
                                             (mu4e-message-field msg :maildir))))
            :vars '((mu4e-sent-messages-behavior . 'delete)
                    (mu4e-trash-folder . "/bvkother@gmail.com/Trash")
                    (mu4e-refile-folder . "/bvkother@gmail.com/Archive")))
          ))
  (setq mu4e-context-policy 'pick-first)

  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "All Inboxes"
                :query "maildir:/bvkchaitanya@gmail.com/Inbox OR maildir:/bvkother@gmail.com/Inbox"
                :key ?i))

  ;; DONT Start mu4e in the background cause it asks for password
  ;; immediately and conflicts with the exwm setup. It should only be
  ;; started manually.
  ;(mu4e t)
  )
#+END_SRC

** IRC Config

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-irc.el
(use-package circe
  :commands circe

  :preface
  (defun my-circe-count-nicks ()
    "Display the number of users connected on the current channel."
    (interactive)
    (when (eq major-mode 'circe-channel-mode)
      (message "%i users are online on %s."
               (length (circe-channel-nicks)) (buffer-name))))

  (defun my-circe-nickserv-password (server)
    "Fetch the NickServ password for the Libera Chat."
    (require 'auth-source)
    (auth-source-pick-first-password :host server :user "bvk"))

  :custom
  (circe-default-part-message nil)
  (circe-default-quit-message nil)
  (circe-format-say (format "{nick:+%ss}: {body}" 8))
  (circe-network-options
   '(("Libera Chat"
      :nick "bvk"
      :tls t
      :port 6697
      :server-buffer-name "Libera Chat"
      :channels (:after-auth "#emacs" "#go-nuts")
      :nickserv-password my-circe-nickserv-password)))
  (circe-reduce-lurker-spam t)
  (circe-use-cycle-completion t)

  :config
  (circe-lagmon-mode)
  (enable-circe-color-nicks)
  (enable-circe-display-images))
#+END_SRC

** Spell Checking

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-spell-check.el
(use-package flyspell
  :ensure nil
  :delight
  :hook ((text-mode . flyspell-mode)
         (prog-mode . flyspell-prog-mode))
  :custom
  (flyspell-default-dictionary "en_US")
  (flyspell-issue-message-flag nil)
  (flyspell-issue-welcome-flag nil))
#+END_SRC

** OrgMode config

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-orgmode.el
(unless (package-installed-p 'org)
  (package-install 'org))
(require 'org)

;; ob-async package enables asynchronous execution of org-babel code
;; blocks using the :async tag.
(unless (package-installed-p 'ob-async)
  (package-install 'ob-async))
(require 'ob-async)

(setq org-directory (expand-file-name "~/org"))
;; TAB key in source blocks indents as per the source block major mode.
(setq org-src-preserve-indentation nil)
(setq org-edit-src-content-indentation 0)
(setq org-src-tab-acts-natively t)
;; org-agent will not change the window layout.
(setq org-agenda-window-setup 'current-window)

;; org-capture config.
(setq org-default-notes-file (concat org-directory "/notes.org"))
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/tasks.org" "Tasks")
         "* TODO %?\n  %i\n  %a")
        ("n" "Note" entry (file+datetree "~/org/notes.org")
         "* %?\nEntered on %U\n  %i\n  %a")))

(defun my-org-capture-note ()
  "Open org-capture for a note."
  (interactive)
  (org-capture nil "n"))
(defun my-org-capture-task ()
  "Open org-capture for a task."
  (interactive)
  (org-capture nil "t"))
#+END_SRC

** Manage Git repos with Magit

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-magit.el
(unless (package-installed-p 'magit)
  (package-install 'magit))
(require 'magit)
#+END_SRC

** Use GNU Global for TAGS

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-gtags.el
(unless (package-installed-p 'ggtags)
  (package-install 'ggtags))
(require 'ggtags)
#+END_SRC

** C/C++ config
#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-cc.el
(defun my-cc-mode-hook ()
  (if (featurep 'whitespace) (whitespace-mode))
  (if (featurep 'column-marker) (column-marker-1 80))
  (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
    (ggtags-mode 1)))
(add-hook 'c-mode-common-hook 'my-cc-mode-hook)
#+END_SRC

** Golang config

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-golang.el
(unless (package-installed-p 'go-mode)
  (package-install 'go-mode))
(require 'go-mode)

;; this needs `go install golang.org/x/tools/cmd/guru@latest`
(unless (package-installed-p 'go-guru)
  (package-install 'go-guru))
(require 'go-guru)

(setq godoc-command "go doc -all")
(if (executable-find "goimports")
    (setq gofmt-command "goimports"))

(defun my-go-mode-hook ()
  (if (featurep 'whitespace) (whitespace-mode -1))
  (if (featurep 'column-marker) (column-marker-1 80))
  (local-set-key (kbd "M-.") 'godef-jump)
  (local-set-key (kbd "M-,") 'pop-tag-mark)
  (go-guru-hl-identifier-mode))
(add-hook 'go-mode-hook 'my-go-mode-hook)

(defun my-golang-find-go-module (dir)
  (when-let ((root (locate-dominating-file dir "go.mod")))
    (cons 'go-module root)))
#+END_SRC

** Keybindings (should be last)
#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-keybindings.el
(global-unset-key (kbd "C-z"))

;; Increase/decrease frame font size.
(global-set-key (kbd "C-x C-=") 'my-font-increase)
(global-set-key (kbd "C-x C--") 'my-font-decrease)

(global-set-key (kbd "<C-left>") 'windmove-left)
(global-set-key (kbd "<C-right>") 'windmove-right)
;; Force same effect in ansi-term windows.
(require 'term)
(define-key term-raw-map (kbd "<C-left>") 'windmove-left)
(define-key term-raw-map (kbd "<C-right>") 'windmove-right)

;; Paste with mouse.
(global-set-key (kbd "<mouse-2>") 'clipboard-yank)

(defun my-x11-internet-browser ()
  "Open internet browser program."
  (interactive)
  (start-process "internet-browser" "*internet-browser*" "google-chrome"))
(defun my-x11-open-terminal ()
  "Open new X11 terminal program."
  (interactive)
  (if (get-buffer "st-256color")
      (switch-to-buffer "st-256color")
    (start-process "terminal" "*Messages*" "st"
                   "-f" (my-font-name my-font-size)
                   "-e" "bash")))
(defun my-x11-open-xephyr () ;; FIXME: Attache the sawfish startup script.
  "Open Xephyr window with sawfish."
  (interactive)
  (start-process "Xephyr" "*Messages*"
                 "xinit" "/home/bvk/config/xephyr/sawfish"
                 "--"
                 "/usr/bin/Xephyr"
                 ":1"
                 "-no-host-grab"
                 "-resizeable"))
(defun my-x11-take-screenshot ()
  "Take screenshot into a png file."
  (interactive)
  (let* ((name (format-time-string "~/screenshot-%Y%m%d%H%M%S.png")))
    (start-process "screenshot" "*Messages*"
                   "bash" "-c" (concat "xwd -silent -root|convert xwd:- " name))))
(defun my-x11-lock-screen ()
  "Run slock to lock the screen."
  (interactive)
  (start-process "slock" "*Messages*" "slock"))
;; END FIXME

(unless (package-installed-p 'transient)
  (package-install 'transient))
(require 'transient)

(define-transient-command my-keybindings-transient()
  "Launch menu with custom keybindings."
  :transient-non-suffix 'transient--do-quit-one
  ["Operations"
   ["Emacs Operations"
    ("c" "Compile" compile)
    ("g" "Magit Status" magit-status)
    ("o" "Switch EXWM Workspace" exwm-workspace-switch)
    ("K" "Kill Emacs" save-buffers-kill-emacs)]

   ["External Programs"
    ("t" "Open Terminal" my-x11-open-terminal)
    ("i" "Internet Browser" my-x11-internet-browser)
    ("S" "Take Screenshot" my-x11-take-screenshot)
    ("X" "Open Xephr Environment" my-x11-open-xephyr)
    ("L" "Lock Screen" my-x11-lock-screen)]

   ["Orgmode Operations"
    ("A" "Show Agenda" org-agenda)
    ("N" "Capture Note" my-org-capture-note)
    ("T" "Capture Note" my-org-capture-task)]])

;; transient popup buffer is displayed at the bottom of current window.
(setq transient-display-buffer-action '(display-buffer-below-selected))

;; transient popup buffer is displayed after 5 seconds.
(setq transient-show-popup 5)

;; remove C-j from all known modes and assign it to the transient popup.

(when (require 'term nil 'noerror)
 (define-key term-raw-map (kbd "C-j") #'my-keybindings-transient))

(define-key org-mode-map (kbd "C-j") #'my-keybindings-transient)
;(define-key vterm-mode-map (kbd "C-j") #'my-keybindings-transient)
;(define-key exwm-mode-map (kbd "C-j") #'my-keybindings-transient)
;(define-key view-mode-map (kbd "C-j") #'my-keybindings-transient)
(define-key magit-mode-map (kbd "C-j") #'my-keybindings-transient)
(define-key magit-diff-mode-map (kbd "C-j") #'my-keybindings-transient)
(define-key magit-file-section-map (kbd "C-j") #'my-keybindings-transient)

;; The following removes C-j from scratch buffer.
(define-key lisp-interaction-mode-map (kbd "C-j") #'my-keybindings-transient)

(global-set-key (kbd "C-j") #'my-keybindings-transient)
#+END_SRC

** Load customizations

	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   ;; save customizations in a separate file
   (setq custom-file "~/.emacs-custom.el")
   (when (file-exists-p custom-file)
     (load custom-file))
	 #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   ;; open the default org-mode file on startup.
   (setq initial-buffer-choice t)
   #+END_SRC

** Personal Information

	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (setq user-full-name "BVK Chaitanya")
   (setq user-mail-address "bvkchaitanya@gmail.com")
	 #+END_SRC

** TODO Load and Search Paths

	 We could get rid of this with attachments.

	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (when (file-exists-p "~/config/emacs/emacs.d")
     (add-to-list 'load-path "~/config/emacs/emacs.d"))
	 #+END_SRC


	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (setenv "PATH"
           (concat (getenv "HOME") "/bin" ":"
                   (getenv "HOME") "/go/bin" ":"
                   (getenv "PATH")))
   ;; Emacs uses exec-path instead of the PATH
   (setq exec-path (split-string (getenv "PATH") ":"))

   ;; Also, update the tramp-default-remote-path.
   (setq tramp-default-remote-path "~/bin:~/go/bin:/bin:/usr/bin")
	 #+END_SRC

** Packages
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (require 'package)
   (setq package-enable-at-starup nil)
   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
   (package-initialize)

   (when (not package-archive-contents)
     (package-refresh-contents))

   (unless (package-installed-p 'pinentry)
     (package-install 'pinentry))
   (require 'pinentry)
   (setenv "INSIDE_EMACS" (format "%s,comint" emacs-version))
   (pinentry-start)

   (unless (package-installed-p 'exwm)
     (package-install 'exwm))
   (require 'exwm)

   (unless (package-installed-p 'magit)
     (package-install 'magit))
   (require 'magit)

   (unless (package-installed-p 'transient)
     (package-install 'transient))
   (require 'transient)

   (unless (package-installed-p 'go-mode)
     (package-install 'go-mode))
   (require 'go-mode)

   (unless (package-installed-p 'bazel-mode)
     (package-install 'bazel-mode))
   (require 'bazel-mode)

   (unless (package-installed-p 'vterm)
     (package-install 'vterm))
   (require 'vterm)

   (require 'view)
   #+END_SRC
** Customizations

	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (setq-default tab-width 2)
   (setq-default indent-tabs-mode nil)
	 #+END_SRC

	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (setq visible-bell t)
   (setq show-trailing-whitespace t)
   (setq split-height-threshold nil)             ; Disable vertical window splitting
   (setq display-time-day-and-date t)
   ;; Merge system's and Emacs' clipboards.
   (setq select-enable-primary t)
   (setq select-enable-clipboard t)
   (global-set-key (kbd "<mouse-2>") 'clipboard-yank)
   (defalias 'yes-or-no-p 'y-or-n-p)
	 #+END_SRC

	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (ido-mode t)
   (show-paren-mode 1)
   (menu-bar-mode 0)
   (tooltip-mode nil)
   (blink-cursor-mode 0)
   (display-time-mode 1)
   (column-number-mode 1)
   ;; emacs-nox has no scroll-bar-mode
   (when (functionp 'scroll-bar-mode)
     (scroll-bar-mode 0))
   ;; emacs-nox has no tool-bar-mode
   (when (functionp 'tool-bar-mode)
     (tool-bar-mode 0))
	 #+END_SRC

	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (add-to-list 'default-frame-alist '(right-fringe . 0))
   (add-to-list 'default-frame-alist '(cursor-color . "green"))
	 #+END_SRC

	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (add-hook 'before-save-hook 'delete-trailing-whitespace)
	 #+END_SRC

	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (require 'epa-file)
   (epa-file-enable)
   ;; Does this need (pinentry-start) from pinentry package?
   (setq epg-pinentry-mode 'loopback)
	 #+END_SRC

** Receive GMail over IMAP with =mbsync=
   #+BEGIN_SRC conf :tangle ~/.mbsyncrc
   IMAPAccount bvkchaitanya@gmail.com
   Host imap.gmail.com
   User bvkchaitanya@gmail.com
   #PassCmd "gpg -q --for-your-eyes-only --no-tty -d ~/.authinfo.gpg | awk '/machine imap.gmail.com login bvkchaitanya@gmail.com/ {print $6}'"
   PassCmd "eval echo `emacsclient -e '(auth-source-pick-first-password :host \"imap.gmail.com\" :user \"bvkchaitanya@gmail.com\")'`"
   AuthMechs LOGIN
   SSLType IMAPS
   SSLVersions TLSv1.2
   #CertificateFile /usr/local/etc/openssl@1.1/cert.pem

   MaildirStore bvkchaitanya-gmail-local
   Path ~/Mail/bvkchaitanya@gmail.com/
   Inbox ~/Mail/bvkchaitanya@gmail.com/Inbox
   SubFolders Verbatim

   IMAPStore bvkchaitanya-gmail-remote
   Account bvkchaitanya@gmail.com

   Channel bvkchaitanya-gmail-inbox
   Master :bvkchaitanya-gmail-remote:"INBOX"
   Slave :bvkchaitanya-gmail-local:"INBOX"
   CopyArrivalDate yes
   Create Both
   Expunge Both
   SyncState *

   Channel bvkchaitanya-gmail-trash
   Master :bvkchaitanya-gmail-remote:"[Gmail]/Trash"
   Slave :bvkchaitanya-gmail-local:"Trash"
   CopyArrivalDate yes
   Create Both
   Expunge Both
   SyncState *

   Channel bvkchaitanya-gmail-spam
   Master :bvkchaitanya-gmail-remote:"[Gmail]/Spam"
   Slave :bvkchaitanya-gmail-local:"Spam"
   CopyArrivalDate yes
   Create Both
   Expunge Both
   SyncState *

   Channel bvkchaitanya-gmail-all
   Master :bvkchaitanya-gmail-remote:"[Gmail]/All Mail"
   Slave :bvkchaitanya-gmail-local:"Archive"
   CopyArrivalDate yes
   Create Both
   Expunge Both
   SyncState *

   Channel bvkchaitanya-gmail-drafts
   Master :bvkchaitanya-gmail-remote:"[Gmail]/Drafts"
   Slave :bvkchaitanya-gmail-local:"Drafts"
   CopyArrivalDate yes
   Create Both
   Expunge Both
   SyncState *

   Group bvkchaitanya-gmail
   Channel bvkchaitanya-gmail-inbox
   Channel bvkchaitanya-gmail-trash
   Channel bvkchaitanya-gmail-all
   Channel bvkchaitanya-gmail-spam
   Channel bvkchaitanya-gmail-drafts
   #+END_SRC

** Orgmode
	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (setq org-directory (expand-file-name "~/org"))
   ;; TAB key in source blocks indents as per the source block major mode.
   (setq org-src-preserve-indentation nil)
   (setq org-edit-src-content-indentation 0)
   (setq org-src-tab-acts-natively t)
   ;; org-agent will not change the window layout.
   (setq org-agenda-window-setup 'current-window)

   ;; org-capture config.
   (setq org-default-notes-file (concat org-directory "/notes.org"))
   (setq org-capture-templates
         '(("t" "Todo" entry (file+headline "~/org/tasks.org" "Tasks")
            "* TODO %?\n  %i\n  %a")
           ("n" "Note" entry (file+datetree "~/org/notes.org")
            "* %?\nEntered on %U\n  %i\n  %a")))
	 #+END_SRC
** Exwm
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (require 'exwm)
   (exwm-enable)

   ;; show mode-line on floating windows.
   (add-hook 'exwm-floating-setup-hook #'exwm-layout-show-mode-line)

   ;;(require 'exwm-config)

   ;; Define number of workspaces.
   (setq exwm-workspace-number 10)
   (setq exwm-replace nil)

   (require 'exwm-systemtray)
   (setq exwm-systemtray-height 24)
   (exwm-systemtray-enable)

   (require 'exwm-randr)
   (exwm-randr-enable)

   ;; Make the class name as the buffer name.
   (add-hook 'exwm-update-class-hook
             (lambda ()
               (exwm-workspace-rename-buffer exwm-class-name)))

   ;; Enable emacs keybindings in selected apps based on their window class name.
   (setq my-simulation-key-window-classes '("Google-chrome" "Firefox"))
   (add-hook 'exwm-manage-finish-hook
             (lambda ()
               (when (and exwm-class-name (member exwm-class-name my-simulation-key-window-classes))
                 (exwm-input-set-local-simulation-keys
                  '(([?\C-c ?\C-c] . ?\C-c)
                    ([?\C-b] . left)
                    ([?\C-f] . right)
                    ([?\C-p] . up)
                    ([?\C-n] . down)
                    ([?\C-a] . home)
                    ([?\C-e] . end)
                    ([?\M-v] . prior)
                    ([?\C-v] . next)
                    ([?\C-d] . delete))))))
   #+END_SRC
** Buffers
	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (when (require 'uniquify nil 'noerror)
     (setq uniquify-buffer-name-style 'forward))
	 #+END_SRC
** Desktop Mode
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (require 'desktop)
   (setq desktop-save 1
         desktop-load-locked-desktop t
         desktop-dirname user-emacs-directory
         desktop-restore-frames nil
                                           ; Don't save remote files and/or *gpg files.
         desktop-files-not-to-save "\\(^/[^/:]*:\\|(ftp)$\\)\\|\\(\\.gpg$\\)")
   (desktop-save-mode 1)
   #+END_SRC
** Column Marker Mode
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (when (require 'column-marker nil 'noerror)
     (progn
       (add-hook 'protobuf-mode-hook (lambda() (column-marker-1 80)))
       (add-hook 'c-mode-hook (lambda() (column-marker-1 80)))
       (add-hook 'c++-mode-hook (lambda() (column-marker-1 80)))))
   #+END_SRC
** Protobuf Mode
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (when (require 'protobuf-mode nil 'noerror)
     (add-to-list 'auto-mode-alist '("\\.proto\\'" . protobuf-mode))
     (add-hook 'protobuf-mode-hook (lambda() (column-marker-1 80))))
   #+END_SRC
** Golang Mode
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (setq gofmt-command "goimports")
   (setq godoc-command "go doc -all")

   (add-hook 'go-mode-hook (lambda() (setq truncate-lines t)))
   (add-hook 'go-mode-hook (lambda() (add-hook 'before-save-hook 'gofmt-before-save)))
   #+END_SRC

	 Disable whitespace mode cause gofmt takes care of proper formatting.

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (when (require 'whitespace nil 'noerror)
     (add-hook 'go-mode-hook (lambda() (whitespace-mode -1))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (when (require 'column-marker nil 'noerror)
     (add-hook 'go-mode-hook (lambda() (column-marker-1 80))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (when (require 'go-guru nil 'noerror)
     (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (defvar my-go-coverage-out-relpath "coverage.out"
     "Relative path to coverage.out file from the project root directory.")
   (defun my-go-coverage-this-file ()
     (interactive)
     (let* ((dir (locate-dominating-file buffer-file-name my-go-coverage-out-relpath))
            (coverage-out (concat dir my-go-coverage-out-relpath)))
       (if (file-exists-p coverage-out)
           (go-coverage coverage-out))))
   (setq my-go-coverage-out-relpath "build/coverage.out")
   #+END_SRC

** IRC
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (require 'rcirc)

   ;; Do not display JOIN, QUIT, etc. messages
   (add-hook 'rcirc-mode-hook (lambda () (rcirc-omit-mode)))
   (setq erc-hide-list '("JOIN" "PART" "QUIT"))

   ;; Show alerts on mode-line when messages are addressed to me
   (add-hook 'rcirc-mode-hook (lambda () (rcirc-track-minor-mode 1)))

   ;; Autojoin channels.
   (setq erc-autojoin-channels-alist
         '(("freenode.net" "#emacs" "#go-nuts" "#nethack")))
   #+END_SRC
** Keybindings
*** TODO We should define magit like popup window for all subcommands

	  We must find a decent prefix-key that is not used by any other package, so
	  that we can use it with exwm, magit, org-capture, org-agenda, etc. commands
	  that do not have default keybindings.

    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
    (global-unset-key (kbd "C-z"))
    #+END_SRC

	  As per the Emacs keybinding documentation, "C-c letter" are reserved for the
	  user. So, we should map all keybindings in that range here, so that we can
	  be sure there aren't any conflicts.

    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
    ;;(exwm-input-set-key (kbd "C-c o") #'exwm-workspace-switch)
    #+END_SRC

*** Window Movement
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
    (global-set-key (kbd "<C-left>") 'windmove-left)
    (global-set-key (kbd "<C-right>") 'windmove-right)
    ;; Force same effect in ansi-term windows.
    (require 'term)
    (define-key term-raw-map (kbd "<C-left>") 'windmove-left)
    (define-key term-raw-map (kbd "<C-right>") 'windmove-right)
    ;; Force
    (exwm-input-set-key (kbd "<C-left>") (lambda() (interactive) (windmove-left)))
    (exwm-input-set-key (kbd "<C-right>") (lambda() (interactive) (windmove-right)))
    #+END_SRC
** Gtags
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (when (require 'gtags nil 'noerror)
     nil)
   #+END_SRC
** TODO Directory Locals
** Load the legacy config

	 We cannot migrate all our old emacs config at once, so just load the existing
	 config file. As we migrate each config item, we shall add it in here and
	 remove it from the existing config.

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   ;;(load-file "~/config/emacs/emacs.el")
   #+END_SRC

** Experiments
*** Transient command example with flags and arguments
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
    (defun my-transient-test (&optional args)
      (interactive
       (list (transient-args 'my-transient)))
             (message "args %s" args))
    (define-infix-argument my-transient:--arg()
      :description "My Argument"
      :class 'transient-option
      :shortarg "-a"
      :argument "--arg")
    (define-transient-command my-transient ()
      "My Transient"
      ["Arguments"
       ("-s" "Switch", "--switch")
       (my-transient:--arg)]
      ["Actions"
       ("d" "Action d" my-transient-test)])
    (setq transient-display-buffer-action '(display-buffer-below-selected))
    #+END_SRC

*** Transient based Keybindings

    We use C-j keybinding for the transient popup window. I never use this
    keybinding anywhere.

**** TODO Xephyr script must be tracked as an attachment

     #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
     (defun my-org-capture-note ()
       "Open org-capture for a note."
       (interactive)
       (org-capture nil "n"))
     (defun my-org-capture-task ()
       "Open org-capture for a task."
       (interactive)
       (org-capture nil "t"))
     (defun my-x11-internet-browser ()
       "Open internet browser program."
       (interactive)
       (start-process "internet-browser" "*internet-browser*" "google-chrome"))
     (defun my-x11-open-terminal ()
       "Open new X11 terminal program."
       (interactive)
       (if (get-buffer "st-256color")
           (switch-to-buffer "st-256color")
         (start-process "terminal" "*Messages*" "st"
                        "-f" (my-frame-font)
                        "-e" "bash")))
     (defun my-x11-open-xephyr () ;; FIXME: Attache the sawfish startup script.
       "Open Xephyr window with sawfish."
       (interactive)
       (start-process "Xephyr" "*Messages*"
                      "xinit" "/home/bvk/config/xephyr/sawfish"
                      "--"
                      "/usr/bin/Xephyr"
                      ":1"
                      "-no-host-grab"
                      "-resizeable"))
     (defun my-x11-take-screenshot ()
       "Take screenshot into a png file."
       (interactive)
       (let* ((name (format-time-string "~/screenshot-%Y%m%d%H%M%S.png")))
         (start-process "screenshot" "*Messages*"
                        "bash" "-c" (concat "xwd -silent -root|convert xwd:- " name))))
     (defun my-x11-lock-screen ()
       "Run slock to lock the screen."
       (interactive)
       (start-process "slock" "*Messages*" "slock"))
     #+END_SRC

     #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
     (define-transient-command my-keybindings-transient()
       "Launch menu with custom keybindings."
       :transient-non-suffix 'transient--do-quit-one
       ["Operations"
        ["Emacs Operations"
         ("c" "Compile" compile)
         ("f" "Rotate Font" my-frame-font-rotate)
         ("g" "Magit Status" magit-status)
         ("o" "Switch EXWM Workspace" exwm-workspace-switch)
         ("K" "Kill Emacs" save-buffers-kill-emacs)]

        ["External Programs"
         ("t" "Open Terminal" my-x11-open-terminal)
         ("i" "Internet Browser" my-x11-internet-browser)
         ("S" "Take Screenshot" my-x11-take-screenshot)
         ("X" "Open Xephr Environment" my-x11-open-xephyr)
         ("L" "Lock Screen" my-x11-lock-screen)]

        ["Orgmode Operations"
         ("A" "Show Agenda" org-agenda)
         ("N" "Capture Note" my-org-capture-note)
         ("T" "Capture Note" my-org-capture-task)]])

     ;; transient popup buffer is displayed at the bottom of current window.
     (setq transient-display-buffer-action '(display-buffer-below-selected))

     ;; transient popup buffer is displayed after 5 seconds.
     (setq transient-show-popup 5)
     #+END_SRC

     In the EXWM mode, we assign the same "C-j" keybinding for the transient
     command, but only for the line-mode. This enables char-mode EXWM
     applications receive all keys, which is useful when we want to run other
     window manager nested in the Xephr sessions. Users can switch between
     line-mode and char-mode by toggling the mode in the mode-line.

     #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
     ;; remove C-j from all known modes and assign it to the transient popup.
     (define-key org-mode-map (kbd "C-j") #'my-keybindings-transient)
     (define-key vterm-mode-map (kbd "C-j") #'my-keybindings-transient)
     (define-key term-raw-map (kbd "C-j") #'my-keybindings-transient)
     (define-key exwm-mode-map (kbd "C-j") #'my-keybindings-transient)
     (define-key view-mode-map (kbd "C-j") #'my-keybindings-transient)
     (define-key magit-mode-map (kbd "C-j") #'my-keybindings-transient)
     (define-key magit-diff-mode-map (kbd "C-j") #'my-keybindings-transient)
     (define-key magit-file-section-map (kbd "C-j") #'my-keybindings-transient)
     (define-key lisp-interaction-mode-map (kbd "C-j") #'my-keybindings-transient)

     (global-set-key (kbd "C-j") #'my-keybindings-transient)
     #+END_SRC

** Gtags

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (when (require 'gtags nil 'noerror)
     nil)
   #+END_SRC

** TODO Directory Locals

** Experiments
*** Window Configuration Fixes

     Following block saves and restores the window configuration for the
     orgmode "C-c '" keybinding in the source codeblocks.

     #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
     (defvar my/org-src-block-tmp-window-configuration nil)

     (defun my/org-edit-special (&optional arg)
       "Save current window configuration before a org-edit buffer is open."
       (setq my/org-src-block-tmp-window-configuration (current-window-configuration)))

     (defun my/org-edit-src-exit ()
       "Restore the window configuration that was saved before org-edit-special was called."
       (set-window-configuration my/org-src-block-tmp-window-configuration))

     (eval-after-load "org"
       `(progn
          (advice-add 'org-edit-special :before 'my/org-edit-special)
          (advice-add 'org-edit-src-exit :after 'my/org-edit-src-exit)))
     #+END_SRC

* X11 Setup
** =~/.Xresources=
*** XTerm

    #+BEGIN_SRC text :tangle ~/.Xresources
    selectToClipboard: true
    #+END_SRC

    #+BEGIN_SRC text :tangle ~/.Xresources
    xterm*metaSendsEscape: true
    xterm*allowSendEvents: true
    xterm*on2Clicks: regex [^/@ \n]+
    xterm*on3Clicks: regex [^ \n]+
    xterm*on4Clicks: regex [^#$]+
    xterm*on5Clicks: line
    #+END_SRC

*** URxvt

    #+BEGIN_SRC text :tangle ~/.Xresources
    URxvt.internalBorder:  0
    URxvt.scrollBar: False
    URxvt.perl-ext-common: tabbed,font-size
    #+END_SRC

*** XFT settings

    #+BEGIN_SRC text :tangle ~/.Xresources
    Xft.dpi: 120
    Xft.hintstyle: hintfull
    Xft.lcdfilter: lcddefault
    Xft.rgba: rgb
    Xft.hinting: 1
    Xft.autohint: 0
    Xft.antialias: 1
    #+END_SRC

*** Solarized theme for Xterm.

    #+BEGIN_SRC text :notangle ~/.Xresources
    #define S_base03        #002b36
    #define S_base02        #073642
    #define S_base01        #586e75
    #define S_base00        #657b83
    #define S_base0         #839496
    #define S_base1         #93a1a1
    #define S_base2         #eee8d5
    #define S_base3         #fdf6e3

    ,*background:            S_base03
    ,*foreground:            S_base0
    ,*fadeColor:             S_base03
    ,*cursorColor:           S_base1
    ,*pointerColorBackground:S_base01
    ,*pointerColorForeground:S_base1

    #define S_yellow        #b58900
    #define S_orange        #cb4b16
    #define S_red           #dc322f
    #define S_magenta       #d33682
    #define S_violet        #6c71c4
    #define S_blue          #268bd2
    #define S_cyan          #2aa198
    #define S_green         #859900

    !! black dark/light
    ,*color0:                S_base02
    ,*color8:                S_base03

    !! red dark/light
    ,*color1:                S_red
    ,*color9:                S_orange

    !! green dark/light
    ,*color2:                S_green
    ,*color10:               S_base01

    !! yellow dark/light
    ,*color3:                S_yellow
    ,*color11:               S_base00

    !! blue dark/light
    ,*color4:                S_blue
    ,*color12:               S_base0

    !! magenta dark/light
    ,*color5:                S_magenta
    ,*color13:               S_violet

    !! cyan dark/light
    ,*color6:                S_cyan
    ,*color14:               S_base1

    !! white dark/light
    ,*color7:                S_base2
    ,*color15:               S_base3
    #+END_SRC

** =~/.xsession=

	 Run an ssh-agent instance for the session.

   #+BEGIN_SRC bash :tangle ~/.xsession
   #!/bin/bash
   source $HOME/.bashrc
   #+END_SRC

   #+BEGIN_SRC bash :tangle ~/.xsession
   # Enable/Disable DPMS (Energy Star) features.
   xset -dpms

   # Enable/Disable blank the video device.
   # xset s noblank

   # Enable/Disable the screensaver.
   # xset s off

   # Enable/Disable access control.
   # xhost +SI:localuser:$USER
   #+END_SRC

   Use gpg-agent with ssh-agent capability. SSH capability is enabled in the
   =~/.gnupg/gpg-agent.conf= file above.

   #+BEGIN_SRC bash :tangle ~/.xsession
   gpg-agent
   #+END_SRC

   #+BEGIN_SRC bash :tangle ~/.xsession
   xrdb -merge ~/.Xresources
   if test -f $HOME/.Xresources-$HOSTNAME; then
     xrdb -merge $HOME/.Xresources-$HOSTNAME
   fi
   #+END_SRC

   #+BEGIN_SRC bash :tangle ~/.xsession
   if test -f $HOME/.xsession-$HOSTNAME; then
     source $HOME/.xsession-$HOSTNAME
   fi
   #+END_SRC

   #+BEGIN_SRC bash :tangle ~/.xsession
   # Start Sawfish
   exec sawfish
   #+END_SRC

*** =~/.xsession-steam=

   #+BEGIN_SRC bash :tangle ~/.xsession-steam
   # Use custom DPI for the 4k, 24" monitor
   xandr --dpi 184
   #+END_SRC

* Footnotes
* COMMENT Local variables [must be the last block]
Configure a buffer-local after-save-hook to tangle the codeblocks when this file
is saved.

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
;; End:
