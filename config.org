#+TITLE: Config in Org-Mode

This is an experiment to configure my systems using a single, org-publish
command.

Normally, I have a git repo with configuration files for all tools, but I have
to manually setup the symlinks to their respective dot files.

See [[https://emacs.stackexchange.com/questions/24645/exporting-and-tangling-simultaneously-in-org-mode][How to Publish using org-mode]]

* Environment

	Prefix $HOME/bin and $HOME/go/bin to PATH so that I can override the tools
	with custom versions. Also, the $HOME/bin directory should only have symlinks
	so that proper version can be selected. For example, when multiple go
	compiler versions (go1.13, go1.15, etc.), the $HOME/bin/go symlink determines
	which one to use by default.

	#+BEGIN_SRC bash :tangle ~/.environment
  export PATH=$HOME/bin:$HOME/go/bin:$PATH
	#+END_SRC

	Almost all machines have enough disk space, so there is no need to lose
	command history anymore. Keep the in-memory command history limited, but
	history file size should be practically unlimited. Also make the shell append
	to the history file after every command, so that history file accumulates
	from multiple open shells simultaneously.

	#+BEGIN_SRC bash :tangle ~/.environment
  export HISTSIZE=1000
  export HISTFILESIZE=10000000
  export PROMPT_COMMAND='history -a'
  #+END_SRC

* OS Packages

	Perhaps, we should split these commands their respective config file
	sections.

  #+BEGIN_SRC bash
  apt-get install -y build-essential
  apt-get install -y golang-go
  apt-get install -y git

  apt-get install -y screen

  apt-get install -y xserver-xorg
  apt-get install -y xdg-utils
  apt-get install -y stterm
  apt-get install -y stterm suckless-tools

  apt-get install -y sawfish
  apt-get install -y sawfish-themes

  apt-get install -y eog # Picture viewer.
  #+END_SRC

** Switch to Golang-1.14

	 #+BEGIN_SRC bash
   go get golang.org/dl/go1.14
   go1.14 download
   ln -snf $HOME/go/bin/go1.14 $HOME/bin/go
	 #+END_SRC

* Dot Files

	We setup all dot files (and directories) here. All codeblocks are configured
	with org-babel-tangle target, so when users run org-babel-tangle command it
	will overwrite the existing dot files.

** ~/.gnupg

	 #+BEGIN_SRC text :mkdirp yes :tangle ~/.gnupg/gpg-agent.conf
   default-cache-ttl 120
   max-cache-ttl 600

   enable-ssh-support
	 #+END_SRC

** ~/.bashrc

	 Copy the default Debian .bashrc content first and then override it with our
	 customizations. This will ensure that we get a familiar environment
	 everywhere.

	 #+BEGIN_SRC bash :tangle ~/.bashrc
   # ~/.bashrc: executed by bash(1) for non-login shells.
   # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
   # for examples

   # If not running interactively, don't do anything
   case $- in
       ,*i*) ;;
       ,*) return;;
   esac

   # don't put duplicate lines or lines starting with space in the history.
   # See bash(1) for more options
   HISTCONTROL=ignoreboth

   # append to the history file, don't overwrite it
   shopt -s histappend

   # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
   HISTSIZE=1000
   HISTFILESIZE=2000

   # check the window size after each command and, if necessary,
   # update the values of LINES and COLUMNS.
   shopt -s checkwinsize

   # If set, the pattern "**" used in a pathname expansion context will
   # match all files and zero or more directories and subdirectories.
   #shopt -s globstar

   # make less more friendly for non-text input files, see lesspipe(1)
   #[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

   # set variable identifying the chroot you work in (used in the prompt below)
   if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
       debian_chroot=$(cat /etc/debian_chroot)
   fi

   # set a fancy prompt (non-color, unless we know we "want" color)
   case "$TERM" in
       xterm-color|*-256color) color_prompt=yes;;
   esac

   # uncomment for a colored prompt, if the terminal has the capability; turned
   # off by default to not distract the user: the focus in a terminal window
   # should be on the output of commands, not on the prompt
   #force_color_prompt=yes

   if [ -n "$force_color_prompt" ]; then
       if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
           # We have color support; assume it's compliant with Ecma-48
           # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
           # a case would tend to support setf rather than setaf.)
           color_prompt=yes
       else
           color_prompt=
       fi
   fi

   if [ "$color_prompt" = yes ]; then
       PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
   else
       PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
   fi
   unset color_prompt force_color_prompt

   # If this is an xterm set the title to user@host:dir
   case "$TERM" in
       xterm*|rxvt*)
           PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
           ;;
       ,*)
           ;;
   esac

   # enable color support of ls and also add handy aliases
   if [ -x /usr/bin/dircolors ]; then
       test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
       alias ls='ls --color=auto'
       #alias dir='dir --color=auto'
       #alias vdir='vdir --color=auto'

       #alias grep='grep --color=auto'
       #alias fgrep='fgrep --color=auto'
       #alias egrep='egrep --color=auto'
   fi

   # colored GCC warnings and errors
   #export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

   # some more ls aliases
   #alias ll='ls -l'
   #alias la='ls -A'
   #alias l='ls -CF'

   # Alias definitions.
   # You may want to put all your additions into a separate file like
   # ~/.bash_aliases, instead of adding them here directly.
   # See /usr/share/doc/bash-doc/examples in the bash-doc package.

   if [ -f ~/.bash_aliases ]; then
       . ~/.bash_aliases
   fi

   # enable programmable completion features (you don't need to enable
   # this, if it's already enabled in /etc/bash.bashrc and /etc/profile
   # sources /etc/bash.bashrc).
   if ! shopt -oq posix; then
       if [ -f /usr/share/bash-completion/bash_completion ]; then
           . /usr/share/bash-completion/bash_completion
       elif [ -f /etc/bash_completion ]; then
           . /etc/bash_completion
       fi
   fi
	 #+END_SRC

	 Override it with our environement. We use ~/.environement file for our
	 customizations, so that (1) we keep ~/.bashrc as pristine as possible for
	 system upgrades and (2) our customizations are easily accessible and
	 tracked.

	 #+BEGIN_SRC bash :tangle ~/.bashrc
   # User customizations.
   . $HOME/.environment
	 #+END_SRC

** ~/.screenrc

	 Copy the default screen configuration from /etc/screenrc file and override
	 it with our customizations at the end.

	 #+BEGIN_SRC text :tangle ~/.screenrc
   # $Id: screenrc,v 1.15 2003/10/08 11:39:03 zal Exp $
   #
   # /etc/screenrc
   #
   #   This is the system wide screenrc.
   #
   #   You can use this file to change the default behavior of screen system wide
   #   or copy it to ~/.screenrc and use it as a starting point for your own
   #   settings.
   #
   #   Commands in this file are used to set options, bind screen functions to
   #   keys, redefine terminal capabilities, and to automatically establish one or
   #   more windows at the beginning of your screen session.
   #
   #   This is not a comprehensive list of options, look at the screen manual for
   #   details on everything that you can put in this file.
   #

   # ------------------------------------------------------------------------------
   # SCREEN SETTINGS
   # ------------------------------------------------------------------------------

   #startup_message off
   #nethack on

   #defflow on # will force screen to process ^S/^Q
   deflogin on
   #autodetach off

   # turn visual bell on
   vbell on
   vbell_msg "   Wuff  ----  Wuff!!  "

   # define a bigger scrollback, default is 100 lines
   defscrollback 1024

   # ------------------------------------------------------------------------------
   # SCREEN KEYBINDINGS
   # ------------------------------------------------------------------------------

   # Remove some stupid / dangerous key bindings
   bind ^k
   #bind L
   bind ^\
   # Make them better
   bind \\ quit
   bind K kill
   bind I login on
   bind O login off
   bind } history

   # An example of a "screen scraper" which will launch urlview on the current
   # screen window
   #
   #bind ^B eval "hardcopy_append off" "hardcopy -h $HOME/.screen-urlview" "screen urlview $HOME/.screen-urlview"

   # ------------------------------------------------------------------------------
   # TERMINAL SETTINGS
   # ------------------------------------------------------------------------------

   # The vt100 description does not mention "dl". *sigh*
   termcapinfo vt100 dl=5\E[M

   # turn sending of screen messages to hardstatus off
   hardstatus off
   # Set the hardstatus prop on gui terms to set the titlebar/icon title
   termcapinfo xterm*|rxvt*|kterm*|Eterm* hs:ts=\E]0;:fs=\007:ds=\E]0;\007
   # use this for the hard status string
   hardstatus string "%h%? users: %u%?"

   # An alternative hardstatus to display a bar at the bottom listing the
   # windownames and highlighting the current windowname in blue. (This is only
   # enabled if there is no hardstatus setting for your terminal)
   #
   #hardstatus lastline "%-Lw%{= BW}%50>%n%f* %t%{-}%+Lw%<"

   # set these terminals up to be 'optimal' instead of vt100
   termcapinfo xterm*|linux*|rxvt*|Eterm* OP

   # Change the xterm initialization string from is2=\E[!p\E[?3;4l\E[4l\E>
   # (This fixes the "Aborted because of window size change" konsole symptoms found
   #  in bug #134198)
   termcapinfo xterm 'is=\E[r\E[m\E[2J\E[H\E[?7h\E[?1;4;6l'

   # To get screen to add lines to xterm's scrollback buffer, uncomment the
   # following termcapinfo line which tells xterm to use the normal screen buffer
   # (which has scrollback), not the alternate screen buffer.
   #
   #termcapinfo xterm|xterms|xs|rxvt ti@:te@

   # Enable non-blocking mode to better cope with flaky ssh connections.
   defnonblock 5

   # ------------------------------------------------------------------------------
   # STARTUP SCREENS
   # ------------------------------------------------------------------------------

   # Example of automatically running some programs in windows on screen startup.
   #
   #   The following will open top in the first window, an ssh session to monkey
   #   in the next window, and then open mutt and tail in windows 8 and 9
   #   respectively.
   #
   # screen top
   # screen -t monkey ssh monkey
   # screen -t mail 8 mutt
   # screen -t daemon 9 tail -f /var/log/daemon.log
	 #+END_SRC

	 Override the defaults with our customizations.

	 #+BEGIN_SRC text :tangle ~/.screenrc
   startup_message off
	 #+END_SRC

	 Default escape key C-a is very important, so move the escape key to C-z.

	 #+BEGIN_SRC text :tangle ~/.screenrc
   escape 
	 #+END_SRC

	 Remove control-flow bindings for C-s and C-q cause they are not really
	 useful and often conflict with normal work. Start

	 #+BEGIN_SRC text :tangle ~/.screenrc
   bind s
   bind ^s
   bind q
   bind ^q
	 #+END_SRC

	 Start the first window at 1 with an interactive-shell which includes the
	 =~/.bashrc=.

	 #+BEGIN_SRC text :tangle ~/.screenrc
   screen -T xterm-256color -t shell 1 /bin/bash
	 #+END_SRC

** ~/.fonts                                                          :ATTACH:
	 :PROPERTIES:
	 :ID:       d89df2d5-632b-41d8-b6b9-cc1107599d9e
	 :DIR:      ~/org/fonts
	 :END:

	 We must create a ~/.fonts directory with custom font files. We use org-mode
	 attachments to store the font files and use org-publish project to copy them
	 into the ~/.fonts directory.

	 When emacs loads this file using org-babel-load-file it will update the
	 org-publish-project-alist with config-fonts for this task. When this project
	 is published it will perform the necessary copying.

	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (when (require 'ox-publish nil 'noerror)
     (add-to-list 'org-publish-project-alist
                  '("config-fonts"
                    :base-directory "~/org/fonts"
                    :base-extension "ttf"
                    :recursive nil
                    :publishing-directory "~/.fonts/"
                    :publishing-function org-publish-attachment)))
	 #+END_SRC

	 We can run emacs --eval '(org-publish "config-fonts")' to create the
	 ~/.fonts directory.

* Emacs
** Load customizations

	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   ;; save customizations in a separate file
   (setq custom-file "~/.emacs-custom.el")
   (when (file-exists-p custom-file)
     (load custom-file))
	 #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   ;; open the default org-mode file on startup.
   (setq initial-buffer-choice t)
   #+END_SRC

** Personal Information

	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (setq user-full-name "BVK Chaitanya")
   (setq user-mail-address "bvkchaitanya@gmail.com")
	 #+END_SRC

** TODO Load and Search Paths

	 We could get rid of this with attachments.

	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (when (file-exists-p "~/config/emacs/emacs.d")
     (add-to-list 'load-path "~/config/emacs/emacs.d"))
	 #+END_SRC


	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (setenv "PATH"
           (concat (getenv "HOME") "/bin" ":"
                   (getenv "HOME") "/go/bin" ":"
                   (getenv "PATH")))
                                           ; Emacs uses exec-path instead of the PATH
   (setq exec-path (split-string (getenv "PATH") ":"))
	 #+END_SRC

** Packages
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (require 'package)
   (setq package-enable-at-starup nil)
   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
   (package-initialize)

   (when (not package-archive-contents)
     (package-refresh-contents))

   (unless (package-installed-p 'exwm)
     (package-install 'exwm))
   (require 'exwm)

   (unless (package-installed-p 'magit)
     (package-install 'magit))
   (require 'magit)

   (unless (package-installed-p 'transient)
     (package-install 'transient))
   (require 'transient)

   (unless (package-installed-p 'go-mode)
     (package-install 'go-mode))
   (require 'go-mode)

   (unless (package-installed-p 'bazel-mode)
     (package-install 'bazel-mode))
   (require 'bazel-mode)

   (require 'view)
   #+END_SRC
** Customizations

	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (setq-default tab-width 2)
   (setq-default indent-tabs-mode nil)
	 #+END_SRC

	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (setq visible-bell t)
   (setq show-trailing-whitespace t)
   (setq split-height-threshold nil)             ; Disable vertical window splitting
   (setq display-time-day-and-date t)
   ;; Merge system's and Emacs' clipboard.
   (setq select-enable-clipboard t)
   (defalias 'yes-or-no-p 'y-or-n-p)
	 #+END_SRC

	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (ido-mode t)
   (show-paren-mode 1)
   (menu-bar-mode 0)
   (tooltip-mode nil)
   (blink-cursor-mode 0)
   (display-time-mode 1)
   (column-number-mode 1)
   ;; emacs-nox has no scroll-bar-mode
   (when (functionp 'scroll-bar-mode)
     (scroll-bar-mode 0))
   ;; emacs-nox has no tool-bar-mode
   (when (functionp 'tool-bar-mode)
     (tool-bar-mode 0))
	 #+END_SRC

	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (add-to-list 'default-frame-alist '(right-fringe . 0))
   (add-to-list 'default-frame-alist '(cursor-color . "green"))
	 #+END_SRC

	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (add-hook 'before-save-hook 'delete-trailing-whitespace)
	 #+END_SRC

** Fonts
	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (defvar my-frame-font-list nil
     "List of font names for use with the my-frame-font-rotate
     function")
   (setq my-frame-font-index nil)
   (defun my-frame-font ()
     "Returns the current frame font from the
   my-frame-font-list. Returns 6x13 if current frame font is not
   activated from the my-frame-font-list."
     (interactive)
     (if (eq (length my-frame-font-list) 0) "6x13"
       (let* ((num-font (length my-frame-font-list)))
         (if (eq num-font 0) "6x13"
           (let* ((last-index (if (integerp my-frame-font-index) my-frame-font-index -1)))
             (if (< last-index 0) "6x13"
               (nth (mod last-index num-font) my-frame-font-list)))))))

   (defun my-frame-font-rotate ()
     "Update the frame font with next font name from the
     my-frame-font-list. Current font index is tracked in
     my-frame-font-index variable. If index is nil it will be
     initialized to zero; otherwise it will be incremented by one
     and may wrap around when reaches to end of the font list."
     (interactive)
     (when (> (length my-frame-font-list) 0)
       (let* ((num-font (length my-frame-font-list))
              (last-index (if (integerp my-frame-font-index)
                              my-frame-font-index -1))
              (next-index (mod (+ last-index 1) num-font))
              (next-font (nth next-index my-frame-font-list)))
         (progn
           (set-frame-font next-font nil t)
           (message (format "font is set to %s at index %d" next-font next-index))
           (setq my-frame-font-index next-index)))))

   (add-to-list 'my-frame-font-list "Ubuntu Mono-12:hintstyle=hintslight:rgba=rgb" t)
   (add-to-list 'my-frame-font-list "Ubuntu Mono-14:hintstyle=hintslight:rgba=rgb" t)
   (add-to-list 'my-frame-font-list "Ubuntu Mono-16:hintstyle=hintslight:rgba=rgb" t)
   (add-to-list 'my-frame-font-list "Ubuntu Mono-18:hintstyle=hintslight:rgba=rgb" t)
   (add-to-list 'my-frame-font-list "Ubuntu Mono-20:hintstyle=hintslight:rgba=rgb" t)
   (add-to-list 'my-frame-font-list "Ubuntu Mono-22:hintstyle=hintslight:rgba=rgb" t)
   (add-to-list 'my-frame-font-list "Ubuntu Mono-24:hintstyle=hintslight:rgba=rgb" t)
   (add-to-list 'my-frame-font-list "Ubuntu Mono-26:hintstyle=hintslight:rgba=rgb" t)
   (add-to-list 'my-frame-font-list "Ubuntu Mono-28:hintstyle=hintslight:rgba=rgb" t)

   (set-face-font 'default "Ubuntu Mono-12:hintstyle=hintslight:rgba=rgb")
	 #+END_SRC

** Magit
** Orgmode
	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (setq org-directory (expand-file-name "~/org"))
   ;; TAB key in source blocks indents as per the source block major mode.
   (setq org-src-preserve-indentation nil)
   (setq org-edit-src-content-indentation 0)
   (setq org-src-tab-acts-natively t)
   ;; org-agent will not change the window layout.
   (setq org-agenda-window-setup 'current-window)

   ;; org-capture config.
   (setq org-default-notes-file (concat org-directory "/notes.org"))
   (setq org-capture-templates
         '(("t" "Todo" entry (file+headline "~/org/tasks.org" "Tasks")
            "* TODO %?\n  %i\n  %a")
           ("n" "Note" entry (file+datetree "~/org/notes.org")
            "* %?\nEntered on %U\n  %i\n  %a")))
	 #+END_SRC
** Exwm
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (require 'exwm)
   (exwm-enable)

   ;; show mode-line on floating windows.
   (add-hook 'exwm-floating-setup-hook #'exwm-layout-show-mode-line)

   ;;(require 'exwm-config)

   ;; Define number of workspaces.
   (setq exwm-workspace-number 10)
   (setq exwm-replace nil)

   (require 'exwm-systemtray)
   (setq exwm-systemtray-height 24)
   (exwm-systemtray-enable)

   (require 'exwm-randr)
   (exwm-randr-enable)

   ;; Make the class name as the buffer name.
   (add-hook 'exwm-update-class-hook
             (lambda ()
               (exwm-workspace-rename-buffer exwm-class-name)))

   ;; Enable emacs keybindings in selected apps based on their window class name.
   (setq my-simulation-key-window-classes '("Google-chrome" "Firefox"))
   (add-hook 'exwm-manage-finish-hook
             (lambda ()
               (when (and exwm-class-name (member exwm-class-name my-simulation-key-window-classes))
                 (exwm-input-set-local-simulation-keys
                  '(([?\C-c ?\C-c] . ?\C-c)
                    ([?\C-b] . left)
                    ([?\C-f] . right)
                    ([?\C-p] . up)
                    ([?\C-n] . down)
                    ([?\C-a] . home)
                    ([?\C-e] . end)
                    ([?\M-v] . prior)
                    ([?\C-v] . next)
                    ([?\C-d] . delete))))))
   #+END_SRC
** Buffers
	 #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (when (require 'uniquify nil 'noerror)
     (setq uniquify-buffer-name-style 'forward))
	 #+END_SRC
** Desktop Mode
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (require 'desktop)
   (setq desktop-save 1
         desktop-load-locked-desktop t
         desktop-dirname user-emacs-directory
         desktop-restore-frames nil
                                           ; Don't save remote files and/or *gpg files.
         desktop-files-not-to-save "\\(^/[^/:]*:\\|(ftp)$\\)\\|\\(\\.gpg$\\)")
   (desktop-save-mode 1)
   #+END_SRC
** Column Marker Mode
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (when (require 'column-marker nil 'noerror)
     (progn
       (add-hook 'protobuf-mode-hook (lambda() (column-marker-1 80)))
       (add-hook 'c-mode-hook (lambda() (column-marker-1 80)))
       (add-hook 'c++-mode-hook (lambda() (column-marker-1 80)))))
   #+END_SRC
** Protobuf Mode
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (when (require 'protobuf-mode nil 'noerror)
     (add-to-list 'auto-mode-alist '("\\.proto\\'" . protobuf-mode))
     (add-hook 'protobuf-mode-hook (lambda() (column-marker-1 80))))
   #+END_SRC
** Golang Mode
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (setq gofmt-command "goimports")
   (setq godoc-command "go doc -all")

   (add-hook 'go-mode-hook (lambda() (setq truncate-lines t)))
   (add-hook 'go-mode-hook (lambda() (add-hook 'before-save-hook 'gofmt-before-save)))
   #+END_SRC

	 Disable whitespace mode cause gofmt takes care of proper formatting.

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (when (require 'whitespace nil 'noerror)
     (add-hook 'go-mode-hook (lambda() (whitespace-mode -1))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (when (require 'column-marker nil 'noerror)
     (add-hook 'go-mode-hook (lambda() (column-marker-1 80))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (when (require 'go-guru nil 'noerror)
     (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (defvar my-go-coverage-out-relpath "coverage.out"
     "Relative path to coverage.out file from the project root directory.")
   (defun my-go-coverage-this-file ()
     (interactive)
     (let* ((dir (locate-dominating-file buffer-file-name my-go-coverage-out-relpath))
            (coverage-out (concat dir my-go-coverage-out-relpath)))
       (if (file-exists-p coverage-out)
           (go-coverage coverage-out))))
   (setq my-go-coverage-out-relpath "build/coverage.out")
   #+END_SRC

** IRC
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (require 'rcirc)

   ;; Do not display JOIN, QUIT, etc. messages
   (add-hook 'rcirc-mode-hook (lambda () (rcirc-omit-mode)))
   (setq erc-hide-list '("JOIN" "PART" "QUIT"))

   ;; Show alerts on mode-line when messages are addressed to me
   (add-hook 'rcirc-mode-hook (lambda () (rcirc-track-minor-mode 1)))

   ;; Autojoin channels.
   (setq erc-autojoin-channels-alist
         '(("freenode.net" "#emacs" "#go-nuts" "#nethack")))
   #+END_SRC
** Keybindings
*** TODO We should define magit like popup window for all subcommands

	  We must find a decent prefix-key that is not used by any other package, so
	  that we can use it with exwm, magit, org-capture, org-agenda, etc. commands
	  that do not have default keybindings.

    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
    (global-unset-key (kbd "C-z"))
    #+END_SRC

	  As per the Emacs keybinding documentation, "C-c letter" are reserved for the
	  user. So, we should map all keybindings in that range here, so that we can
	  be sure there aren't any conflicts.

    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
    ;;(exwm-input-set-key (kbd "C-c o") #'exwm-workspace-switch)
    #+END_SRC

*** Window Movement
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
    (global-set-key (kbd "<C-left>") 'windmove-left)
    (global-set-key (kbd "<C-right>") 'windmove-right)
    ;; Force same effect in ansi-term windows.
    (require 'term)
    (define-key term-raw-map (kbd "<C-left>") 'windmove-left)
    (define-key term-raw-map (kbd "<C-right>") 'windmove-right)
    ;; Force
    (exwm-input-set-key (kbd "<C-left>") (lambda() (interactive) (windmove-left)))
    (exwm-input-set-key (kbd "<C-right>") (lambda() (interactive) (windmove-right)))
    #+END_SRC
** Gtags
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (when (require 'gtags nil 'noerror)
     nil)
   #+END_SRC
** TODO Directory Locals
** Load the legacy config

	 We cannot migrate all our old emacs config at once, so just load the existing
	 config file. As we migrate each config item, we shall add it in here and
	 remove it from the existing config.

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   ;;(load-file "~/config/emacs/emacs.el")
   #+END_SRC

** Experiments
*** Transient command example with flags and arguments
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
    (defun my-transient-test (&optional args)
      (interactive
       (list (transient-args 'my-transient)))
             (message "args %s" args))
    (define-infix-argument my-transient:--arg()
      :description "My Argument"
      :class 'transient-option
      :shortarg "-a"
      :argument "--arg")
    (define-transient-command my-transient ()
      "My Transient"
      ["Arguments"
       ("-s" "Switch", "--switch")
       (my-transient:--arg)]
      ["Actions"
       ("d" "Action d" my-transient-test)])
    (setq transient-display-buffer-action '(display-buffer-below-selected))
    #+END_SRC

*** Transient based Keybindings

    We use C-j keybinding for the transient popup window. I don't normally use
    this key frequently.

**** TODO Xephyr script must be tracked as an attachment

     #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
     (defun my-org-capture-note ()
       "Open org-capture for a note."
       (interactive)
       (org-capture nil "n"))
     (defun my-org-capture-task ()
       "Open org-capture for a task."
       (interactive)
       (org-capture nil "t"))
     (defun my-x11-internet-browser ()
       "Open internet browser program."
       (interactive)
       (start-process "internet-browser" "*internet-browser*" "google-chrome"))
     (defun my-x11-open-terminal ()
       "Open new X11 terminal program."
       (interactive)
       (if (get-buffer "st-256color")
           (switch-to-buffer "st-256color")
         (start-process "terminal" "*Messages*" "st"
                        "-f" (my-frame-font)
                        "-e" "bash")))
     (defun my-x11-open-xephyr () ;; FIXME: Attache the sawfish startup script.
       "Open Xephyr window with sawfish."
       (interactive)
       (start-process "Xephyr" "*Messages*"
                      "xinit" "/home/bvk/config/xephyr/sawfish"
                      "--"
                      "/usr/bin/Xephyr"
                      ":1"
                      "-no-host-grab"
                      "-resizeable"))
     (defun my-x11-take-screenshot ()
       "Take screenshot into a png file."
       (interactive)
       (let* ((name (format-time-string "~/screenshot-%Y%m%d%H%M%S.png")))
         (start-process "screenshot" "*Messages*"
                        "bash" "-c" (concat "xwd -silent -root|convert xwd:- " name))))
     (defun my-x11-lock-screen ()
       "Run slock to lock the screen."
       (interactive)
       (start-process "slock" "*Messages*" "slock"))
     #+END_SRC

     #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
     (define-transient-command my-keybindings-transient()
       "Launch menu with custom keybindings."
       ["Operations"
        ["Emacs Operations"
         ("c" "Compile" compile)
         ("f" "Rotate Font" my-frame-font-rotate)
         ("g" "Magit Status" magit-status)
         ("o" "Switch EXWM Workspace" exwm-workspace-switch)
         ("K" "Kill Emacs" save-buffers-kill-emacs)]

        ["External Programs"
         ("t" "Open Terminal" my-x11-open-terminal)
         ("i" "Internet Browser" my-x11-internet-browser)
         ("S" "Take Screenshot" my-x11-take-screenshot)
         ("X" "Open Xephr Environment" my-x11-open-xephyr)
         ("L" "Lock Screen" my-x11-lock-screen)]

        ["Orgmode Operations"
         ("A" "Show Agenda" org-agenda)
         ("N" "Capture Note" my-org-capture-note)
         ("T" "Capture Note" my-org-capture-task)]])

     ;; transient popup buffer is displayed at the bottom of current window.
     (setq transient-display-buffer-action '(display-buffer-below-selected))

     ;; transient popup buffer is displayed after 5 seconds.
     (setq transient-show-popup 5)
     #+END_SRC

     In the EXWM mode, we assign the same "C-j" keybinding for the transient
     command, but only for the line-mode. This enables char-mode EXWM
     applications receive all keys, which is useful when we want to run other
     window manager nested in the Xephr sessions. Users can switch between
     line-mode and char-mode by toggling the mode in the mode-line.

     #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
     ;; remove C-j from all known modes and assign it to the transient popup.
     (define-key org-mode-map (kbd "C-j") #'my-keybindings-transient)
     (define-key term-raw-map (kbd "C-j") #'my-keybindings-transient)
     (define-key exwm-mode-map (kbd "C-j") #'my-keybindings-transient)
     (define-key view-mode-map (kbd "C-j") #'my-keybindings-transient)
     (define-key magit-mode-map (kbd "C-j") #'my-keybindings-transient)
     (define-key magit-diff-mode-map (kbd "C-j") #'my-keybindings-transient)
     (define-key magit-file-section-map (kbd "C-j") #'my-keybindings-transient)
     (define-key lisp-interaction-mode-map (kbd "C-j") #'my-keybindings-transient)

     (global-set-key (kbd "C-j") #'my-keybindings-transient)
     #+END_SRC

** Gtags

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
   (when (require 'gtags nil 'noerror)
     nil)
   #+END_SRC

** TODO Directory Locals

** Experiments
*** Window Configuration Fixes

     Following block saves and restores the window configuration for the
     orgmode "C-c '" keybinding in the source codeblocks.

     #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
     (defvar my/org-src-block-tmp-window-configuration nil)

     (defun my/org-edit-special (&optional arg)
       "Save current window configuration before a org-edit buffer is open."
       (setq my/org-src-block-tmp-window-configuration (current-window-configuration)))

     (defun my/org-edit-src-exit ()
       "Restore the window configuration that was saved before org-edit-special was called."
       (set-window-configuration my/org-src-block-tmp-window-configuration))

     (eval-after-load "org"
       `(progn
          (advice-add 'org-edit-special :before 'my/org-edit-special)
          (advice-add 'org-edit-src-exit :after 'my/org-edit-src-exit)))
     #+END_SRC

* X11 Setup
** ~/.Xresources
*** XTerm

    #+BEGIN_SRC text :tangle ~/.Xresources
    xterm*metaSendsEscape: true
    xterm*allowSendEvents: true
    xterm*selectToClipboard: false
    xterm*on2Clicks: regex [^/@ \n]+
    xterm*on3Clicks: regex [^ \n]+
    xterm*on4Clicks: regex [^#$]+
    xterm*on5Clicks: line
    #+END_SRC

*** URxvt

    #+BEGIN_SRC text :tangle ~/.Xresources
    URxvt.internalBorder:  0
    URxvt.scrollBar: False
    #+END_SRC

*** XFT settings

    #+BEGIN_SRC text :tangle ~/.Xresources
    Xft.dpi: 120
    Xft.hintstyle: hintfull
    Xft.lcdfilter: lcddefault
    Xft.rgba: rgb
    Xft.hinting: 1
    Xft.autohint: 0
    Xft.antialias: 1
    #+END_SRC

*** Solarized theme for Xterm.

    #+BEGIN_SRC text :tangle ~/.Xresources
    #define S_base03        #002b36
    #define S_base02        #073642
    #define S_base01        #586e75
    #define S_base00        #657b83
    #define S_base0         #839496
    #define S_base1         #93a1a1
    #define S_base2         #eee8d5
    #define S_base3         #fdf6e3

    ,*background:            S_base03
    ,*foreground:            S_base0
    ,*fadeColor:             S_base03
    ,*cursorColor:           S_base1
    ,*pointerColorBackground:S_base01
    ,*pointerColorForeground:S_base1

    #define S_yellow        #b58900
    #define S_orange        #cb4b16
    #define S_red           #dc322f
    #define S_magenta       #d33682
    #define S_violet        #6c71c4
    #define S_blue          #268bd2
    #define S_cyan          #2aa198
    #define S_green         #859900

    !! black dark/light
    ,*color0:                S_base02
    ,*color8:                S_base03

    !! red dark/light
    ,*color1:                S_red
    ,*color9:                S_orange

    !! green dark/light
    ,*color2:                S_green
    ,*color10:               S_base01

    !! yellow dark/light
    ,*color3:                S_yellow
    ,*color11:               S_base00

    !! blue dark/light
    ,*color4:                S_blue
    ,*color12:               S_base0

    !! magenta dark/light
    ,*color5:                S_magenta
    ,*color13:               S_violet

    !! cyan dark/light
    ,*color6:                S_cyan
    ,*color14:               S_base1

    !! white dark/light
    ,*color7:                S_base2
    ,*color15:               S_base3
    #+END_SRC

** ~/.xsession
*** Use gpg-agent with ssh-agent capability.

	  Run an ssh-agent instance for the session.

    #+BEGIN_SRC bash :tangle ~/.xsession
    #!/bin/bash
    source $HOME/.environment
    #+END_SRC

    #+BEGIN_SRC bash :tangle ~/.xsession
    gpg-agent
    #+END_SRC

    #+BEGIN_SRC bash :tangle ~/.xsession
    xrdb -merge ~/.Xresources
    #+END_SRC

    #+BEGIN_SRC bash :tangle ~/.xsession
    # Start few applets.
    if which blueman-applet; then
        blueman-applet &
    fi
    if which nm-applet; then
        nm-applet &
    fi
    if which pasystray; then
        pasystray &
    fi
    #+END_SRC

    #+BEGIN_SRC bash :tangle ~/.xsession
    # Start Emacs
    exec emacs --debug-init -mm
    #+END_SRC

* COMMENT Local variables [must be the last block]
Configure a buffer-local after-save-hook to tangle the codeblocks when this file
is saved.

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
;; End:
