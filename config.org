#+TITLE: All Configs in Org-Mode

This is an experiment to track all customization I do on my systems
in a single, org-mode file.

Org-Mode has features like ~org-babel-tangle~ and ~org-babel-execute~
which can create publish config files and execute code blocks defined
in an org-mode file. We could use these features to create near
reproducible development environments across multiple systems.

See [[https://emacs.stackexchange.com/questions/24645/exporting-and-tangling-simultaneously-in-org-mode][How to Publish using org-mode]]

* Org-Mode Background Notes
** Executing bash code blocks

The following emacs-lisp config adds shell scripts to the list of code
block types enabled for ~org-babel-execute~ mechanism.

#+BEGIN_SRC emacs-lisp :results none
(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)))
#+END_SRC

Since executing arbitrary shell code could be dangerous, we don't want
to enable this by default in Emacs. Use ~C-x C-e~ to enable it as
necessary.

** Execute bash code blocks under ~sudo~

The following example illustrates how to define a bash code block to
run under ~sudo~ context. When we run ~org-babel-execute-src-block~
with the cursor inside the code block, a shell session is created in a
buffer named ~*org-sudo-bash*~ and commands in the code block are
executed sequentially.

#+BEGIN_SRC bash :dir /sudo:: :results none :session *org-sudo-bash*
pwd
whoami
#+END_SRC

* Debian

** Force ~apt-get~ to use only IPv4

#+BEGIN_SRC conf :tangle /sudo::/etc/apt/apt.conf.d/99force-ipv4
Acquire::ForceIPv4 "true";
#+END_SRC

** Repositories

We want to install most of the packages from the ~stable~ channel. We
also want to install packages selectively from ~testing~ and
~unstable~ if and when necessary. We achieve this using ~apt-get~
preferences files.

It can be risky to maintain packages from different channels. The following
commands can help. Also, see https://wiki.debian.org/DontBreakDebian

#+BEGIN_SRC bash
apt-cache show <package>         # to see information on a package
apt-cache showpkg <virtual-pkg>  # to list packages providing virtual-pkg
apt-cache policy <package>       # to see version information for a package
apt-cache depends <package>      # to dependencies of a package
aptitude why <package>           # to see reason why a package is installed
aptitude why-not <package>       # to see reasons why a package cannot be installed
#+END_SRC

*** Stable Repository

Add the ~stable~ repository to the ~apt-get~ sources directory.

#+BEGIN_SRC conf :tangle /sudo::/etc/apt/sources.list.d/stable.list
deb http://ftp.us.debian.org/debian/ stable main contrib non-free-firmware non-free
deb-src http://ftp.us.debian.org/debian/ stable main contrib non-free-firmware non-free
#+END_SRC

Set a high priority to the ~stable~ channel, so that matching package
is always chosen from this repository.

#+BEGIN_SRC conf :tangle /sudo::/etc/apt/preferences.d/stable.pref
# 500 <= P < 990: causes a version to be installed unless there is a
# version available belonging to the target release or the installed
# version is more recent

Package: *
Pin: release a=stable
Pin-Priority: 900
#+END_SRC

*** Testing Repository

Add the ~testing~ repository to the ~apt-get~ sources directory.

#+BEGIN_SRC conf :tangle /sudo::/etc/apt/sources.list.d/testing.list
deb http://ftp.us.debian.org/debian/ testing main contrib non-free
deb-src http://ftp.us.debian.org/debian/ testing main contrib non-free
#+END_SRC

Set a medium priority to the ~testing~ channel. We can install a
package from ~testing~ using ~apt-get -t testing install pkg-name~
command when necessary.

#+BEGIN_SRC conf :tangle /sudo::/etc/apt/preferences.d/testing.pref
# 100 <= P < 500: causes a version to be installed unless there is a
# version available belonging to some other distribution or the installed
# version is more recent

Package: *
Pin: release a=testing
Pin-Priority: 400
#+END_SRC

*** Unstable Repository

Add the ~unstable~ repository to the ~apt-get~ sources directory.

#+BEGIN_SRC conf :tangle /sudo::/etc/apt/sources.list.d/unstable.list
deb http://ftp.us.debian.org/debian/ unstable main contrib non-free
deb-src http://ftp.us.debian.org/debian/ unstable main contrib non-free
#+END_SRC

Set a very low priority to the ~unstable~ channel. Similar to
~testing~, we can use ~apt-get -t unstable install pkg-name~ to
install packages from here selectively.

#+BEGIN_SRC conf :tangle /sudo::/etc/apt/preferences.d/unstable.pref
# 0 < P < 100: causes a version to be installed only if there is no
# installed version of the package

Package: *
Pin: release a=unstable
Pin-Priority: 50
#+END_SRC

*** Experimental Repository

Also add the ~experimental~ repository to the ~apt-get~ sources directory.

#+BEGIN_SRC conf :tangle /sudo::/etc/apt/sources.list.d/experimental.list
deb http://ftp.us.debian.org/debian/ experimental main contrib non-free
deb-src http://ftp.us.debian.org/debian/ experimental main contrib non-free
#+END_SRC

Set the lowest priority to the ~experimental~ channel.

#+BEGIN_SRC conf :tangle /sudo::/etc/apt/preferences.d/experimental.pref
# 0 < P < 100: causes a version to be installed only if there is no
# installed version of the package

Package: *
Pin: release a=experimental
Pin-Priority: 1
#+END_SRC

** Packages

We can install all our favorite packages in one go by running
~org-babel-execute-src-block~ with the cursor anywhere in the
block.

#+BEGIN_SRC bash :dir /sudo:: :results none :session *org-sudo-bash*
apt-get update
apt-get install -y aptitude
apt-get install -y apt-show-versions

# Essentials.
apt-get install -y build-essential
apt-get install -y golang-go
apt-get install -y git
apt-get install -y screen

# Emacs
apt-get install -y gpg
apt-get install -y isync
apt-get install -y mu4e
apt-get install -y bogofilter
apt-get install -y cmake
apt-get install -y ttf-ubuntu-font-family

# X11
apt-get install -y xserver-xorg
apt-get install -y xinit
apt-get install -y xserver-xephyr
apt-get install -y wdm
apt-get install -y x11-apps
apt-get install -y sxhkd
apt-get install -y feh
apt-get install -y dwm
apt-get install -y stterm
apt-get install -y suckless-tools
apt-get install -y xss-lock # for screensaver locking

# Audio & Video
apt-get install -y pulseaudio
apt-get install -y pavucontrol
apt-get install -y mplayer
apt-get install -y ffmpeg
apt-get install -y imagemagick

# Internet
apt-get install -y firefox-esr

# System Tray apps
apt-get install -y pasystray
apt-get install -y cbatticon
#+END_SRC

** Install the latest Golang version and tools

The default golang compiler from Debian stable could be too old, so
install the latest version in the user's ~$HOME~ directory.

#+BEGIN_SRC bash :results none :session *org-bash*
go install golang.org/dl/go1.18@latest && ~/go/bin/go1.18 download
go install golang.org/dl/go1.19@latest && ~/go/bin/go1.19 download
#+END_SRC

Select the default go version with a symlink in users's ~$HOME/bin~
directory. We will prepend the ~$HOME/bin~ directory to ~$PATH~ in
~~/.bashrc~ file.

#+BEGIN_SRC bash :results none :session *org-bash*
mkdir -p ~/bin
ln -snf ~/go/bin/go1.19 ~/bin/go
#+END_SRC

Install golang tools required by Emacs golang configuration.

#+BEGIN_SRC bash :results none :session *org-bash*
~/bin/go install golang.org/x/tools/gopls@latest
~/bin/go install golang.org/x/tools/cmd/goimports@latest
~/bin/go install golang.org/x/tools/cmd/guru@latest
#+END_SRC

* Hosts

** Steamdeck

#+BEGIN_SRC bash :tangle ~/.environment-bvkdeck
export XRANDR_DISPLAY_ORDER1=DisplayPort-0
export XRANDR_DISPLAY_ORDER2=eDP
#+END_SRC

** Lenovo X1 Nano laptop

#+BEGIN_SRC bash :tangle ~/.environment-bvknano
export XRANDR_DISPLAY_ORDER1=DP-1,DP-2,DP-3,DP-4,eDP-1
export XRANDR_DISPLAY_ORDER2=eDP-1,DP-1,DP-2,DP-3,DP-4
#+END_SRC

* Dot Files

All dot file config code blocks are configured with a
~org-babel-tangle~ target, so when ~org-babel-tangle~ command is run,
it will *overwrite* the existing dot files.

We also configure a local file-save hook at the end of this file, so
that when we save this file, code block changes will update the target
dot files automatically.

** =~/.environment=

Instead of modifying the standard bash startup config files directly,
I like to save my bash config in a custom file and load it from the
~~/.bashrc~ file.

*** Configure ~$PATH~ variable

Add ~$HOME/bin~ and ~$HOME/go/bin~ directories to the ~$PATH~
environment variable.

#+BEGIN_SRC bash :tangle ~/.environment
export PATH=$HOME/bin:$HOME/go/bin:$PATH
#+END_SRC

*** Export hostname as a variable

#+BEGIN_SRC bash :tangle ~/.environment
export HOSTNAME=$(hostname -s)
#+END_SRC

*** Setup unlimited bash history

#+BEGIN_SRC bash :tangle ~/.environment
# Eternal bash history.
# ---------------------
# Undocumented feature which sets the size to "unlimited".
# http://stackoverflow.com/questions/9457233/unlimited-bash-history
export HISTFILESIZE=
export HISTSIZE=
export HISTTIMEFORMAT="[%F %T] "
# Change the file location because certain bash sessions truncate .bash_history file upon close.
# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
export HISTFILE=~/.bash_eternal_history
# Force prompt to write history after every command.
# http://superuser.com/questions/20900/bash-history-loss
PROMPT_COMMAND="history -a; $PROMPT_COMMAND"
#+END_SRC

*** Setup aliases for BCH/XEC binaries

These values are only meant for the server where bitcoin data
directory really exists.

#+BEGIN_SRC bash :tangle ~/.environment
if test -d /localzpool/bch-bchn -a -d $HOME/tools/bitcoin-cash-node; then
    alias bitcoind-bchn='$HOME/tools/bitcoin-cash-node/bin/bitcoind -datadir=/localzpool/bch-bchn'
    alias bitcoin-cli-bchn='$HOME/tools/bitcoin-cash-node/bin/bitcoin-cli -datadir=/localzpool/bch-bchn'
fi

if test -d /localzpool/bch-abc -a -d $HOME/tools/bitcoin-abc; then
    alias bitcoind-abc='$HOME/tools/bitcoin-abc/bin/bitcoind -datadir=/localzpool/bch-abc'
    alias bitcoin-cli-abc='$HOME/tools/bitcoin-abc/bin/bitcoin-cli -datadir=/localzpool/bch-abc'
fi
#+END_SRC

** =~/.bashrc=

We include the standard Debian ~.bashrc~ content first and then load
our customization at the end. This will ensure that we get a familiar
environment before the customization.

#+BEGIN_SRC bash :tangle ~/.bashrc
if test -f /etc/skel/.bashrc; then
    source /etc/skel/.bashrc
fi
#+END_SRC

#+BEGIN_SRC bash :tangle ~/.bashrc
if test -f $HOME/.environment; then
    source $HOME/.environment
fi

# Load host specific config if it exists.
if test -f $HOME/.environment-$HOSTNAME; then
    source $HOME/.environment-$HOSTNAME
fi
#+END_SRC

** =~/.bash_profile=

Make the login shell also read ~~/.bashrc~ file.

#+BEGIN_SRC bash :tangle ~/.bash_profile
if test -f $HOME/.bashrc; then
    . $HOME/.bashrc
fi
#+END_SRC

** =~/.bash_login=

Make the login shell also read ~~/.bashrc~ file.

#+BEGIN_SRC bash :tangle ~/.bash_profile
if test -f $HOME/.bashrc; then
    . $HOME/.bashrc
fi
#+END_SRC

** =~/.gnupg=

Following gnupg config file configures the ~gpg-agent~ for emacs.

#+BEGIN_SRC text :mkdirp yes :tangle ~/.gnupg/gpg-agent.conf
default-cache-ttl 120
max-cache-ttl 600

allow-emacs-pinentry
allow-loopback-entry
#+END_SRC

** =~/.screenrc=

We include the default screen configuration ~/etc/screenrc~ file and
customize it.

#+BEGIN_SRC conf :tangle ~/.screenrc
source /etc/screenrc
#+END_SRC

*** Don't display startup screen

#+BEGIN_SRC conf :tangle ~/.screenrc
startup_message off
#+END_SRC

*** Pick a large scrollback history

#+BEGIN_SRC conf :tangle ~/.screenrc
defscrollback 50000
#+END_SRC

*** Set the escape key to ~C-z~

The default escape key ~C-a~ conflicts with Emacs and BASH keybindings, so we
use ~C-z~ instead. Users can do ~C-z C-z~ to get send one ~C-z~ key to the
applications running inside the screen.

#+BEGIN_SRC conf :tangle ~/.screenrc
escape 
#+END_SRC

*** Remove terminal control-flow bindings

Terminal control-flow bindings ~C-s~ and ~C-q~ cause random lockups. They
are not really useful in modern terminals, so we disable them.

#+BEGIN_SRC conf :tangle ~/.screenrc
bind s
bind ^s
bind q
bind ^q
#+END_SRC

*** FIXME Enable ~Shift-PageUp~ and ~Shift-PageDown~ keys

#+BEGIN_SRC conf :tangle ~/.screenrc
termcapinfo xterm|xterms|xs|rxvt ti@:te@
#+END_SRC

*** Force ~TERM~ to use 256 colors

#+BEGIN_SRC conf :tangle ~/.screenrc
term xterm-256color
#+END_SRC

*** Start first window at 1

Start the shell in interactive-mode which reads my =~/.bashrc=
customizations.

#+BEGIN_SRC conf :tangle ~/.screenrc
screen -t shell 1 /bin/bash
#+END_SRC

** X11 Wallpaper                                                     :ATTACH:
:PROPERTIES:
:ID:       703c8927-19e5-44c6-97ae-aa196344751f
:END:

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/my-org-publish.el
(when (require 'ox-publish nil 'noerror)
  (add-to-list 'org-publish-project-alist
               '("publish-wallpaper"
                 :base-directory "~/org/wallpaper"
                 :exclude ".*"
                 :include ["blank.jpg"]
                 :recursive nil
                 :publishing-directory "~/.wallpaper/"
                 :publishing-function org-publish-attachment)))
#+END_SRC

We can run ~emacsclient -e '(org-publish "publish-wallpaper" t)'~
command to create the wallpaper file at ~~/.wallpaper/blank.jpg~.

** =~/.fonts= directory                                              :ATTACH:
:PROPERTIES:
:ID:       d89df2d5-632b-41d8-b6b9-cc1107599d9e
:DIR:      ~/org/fonts
:END:

We want to create a ~~/.fonts~ directory with custom font files. We
use org-mode attachments to store the font files and use org-publish
project to copy them into the ~~/.fonts~ directory.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/my-org-publish.el
(when (featurep 'ox-publish)
  (add-to-list 'org-publish-project-alist
               '("publish-fonts"
                 :base-directory "~/org/fonts"
                 :base-extension "ttf"
                 :recursive nil
                 :publishing-directory "~/.fonts/"
                 :publishing-function org-publish-attachment)))
#+END_SRC

We can run ~emacsclient -e '(org-publish "publish-fonts" t)'~ to copy
Ubuntu fonts into the ~~/.fonts~ directory.

** =~/.ssh/config=

1. Milk server uses static ip.

#+BEGIN_SRC conf :mkdirp yes :tangle ~/.ssh/config
Host milk-home
  HostName 192.168.0.10
  User bvk
#+END_SRC

** =~/.ssh/authorized_keys=

Steam public key

#+BEGIN_SRC conf :mkdirp yes :tangle ~/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCWTvx3XZFM9YVgxS+aDJ6gZBJR/BFec0/C8yYgBI+G0KMttHOxXuFJJ+UNtufcuPUAqe0vepDWh4bz4dimE4iDWnC5G0LJ71b8YVewtvEu5xSOmjRE38ozCfN0fwLsSvQqUaqlNexpiN+lcDL1UeKXFWzTMp8kE6WEnE7AXUk1Srl5eB0SaQz1ULp7alcq+6T+eySTEvRBzEzZQEK/ToWp8MnRjG09pitCGwnoa2OCDkNPhpUus7RlPhVlCBOjX/D74UcgVUG225sOMCsmqDK+5Y1XJgw3AHGL+9i31gc5U5FyewNHbV3LTmeOoGE2VjbfGDTsSP/i/T7F4LWLMhYL bvk@steam
#+END_SRC

** Use Emacs keybindings in GTK apps
*** =~/.gtkrc-2.0=

#+BEGIN_SRC conf :mkdirp yes :tangle ~/.gtkrc-2.0
# Get firefox to use emacs keybindings
include "/usr/share/themes/Emacs/gtk-2.0-key/gtkrc"
gtk-key-theme-name = "Emacs"
#+END_SRC

*** =~/.config/gtk-3.0/settings.ini=

#+BEGIN_SRC conf :mkdirp yes :tangle ~/.config/gtk-3.0/settings.ini
# Get firefox to use emacs keybindings
[Settings]
gtk-key-theme-name = Emacs
#+END_SRC

* Emacs
** Config files
#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs
;; configure package repositories and install use-package first.
(if (file-exists-p "~/.emacs.d/my-emacs-repos.el")
    (load-file "~/.emacs.d/my-emacs-repos.el"))

;; basic emacs editing config
(if (file-exists-p "~/.emacs.d/my-editing.el")
    (load-file "~/.emacs.d/my-editing.el"))

(if (file-exists-p "~/.emacs.d/my-shell-env.el")
    (load-file "~/.emacs.d/my-shell-env.el"))

(if (file-exists-p "~/.emacs.d/my-eglot.el")
    (load-file "~/.emacs.d/my-eglot.el"))

(if (file-exists-p "~/.emacs.d/my-gtags.el")
    (load-file "~/.emacs.d/my-gtags.el"))

(if (file-exists-p "~/.emacs.d/my-magit.el")
    (load-file "~/.emacs.d/my-magit.el"))

(if (file-exists-p "~/.emacs.d/my-gpg.el")
    (load-file "~/.emacs.d/my-gpg.el"))

(if (file-exists-p "~/.emacs.d/my-spell-check.el")
    (load-file "~/.emacs.d/my-spell-check.el"))

(if (file-exists-p "~/.emacs.d/my-orgmode.el")
    (load-file "~/.emacs.d/my-orgmode.el"))

(if (file-exists-p "~/.emacs.d/my-org-publish.el")
    (load-file "~/.emacs.d/my-org-publish.el"))

(if (file-exists-p "~/.emacs.d/my-golang.el")
    (load-file "~/.emacs.d/my-golang.el"))

(if (equal (system-name) "steam")
    (if (file-exists-p "~/.emacs.d/my-email.el")
        (load-file "~/.emacs.d/my-email.el")))

(if (file-exists-p "~/.emacs.d/my-irc.el")
    (load-file "~/.emacs.d/my-irc.el"))

(if (file-exists-p "~/.emacs.d/my-fonts.el")
    (load-file "~/.emacs.d/my-fonts.el"))

;; load keybindings as the last item.
(if (file-exists-p "~/.emacs.d/my-keybindings.el")
    (load-file "~/.emacs.d/my-keybindings.el"))

(if (file-exists-p "~/.emacs.d/my-exwm.el")
    (load-file "~/.emacs.d/my-exwm.el"))

;; Server start is required for mu4e/mbsync to get the password
;; using the emacsclient command.
(server-start)
#+END_SRC

** Editing config

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-editing.el
;; use single y or n character
(defalias 'yes-or-no-p 'y-or-n-p)

;; save minibufer history
(savehist-mode 1)

;; open the *scratch* buffer on startup
(setq initial-buffer-choice t)

;; don't bell with sound
(setq visible-bell t)

;; don't waste too many columns for tabs
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)
(setq-default fill-column 79)

;; high-light column number 80
(setopt display-fill-column-indicator-column 80)
(setq global-display-fill-column-indicator-modes '(c-mode text-mode (not go-mode vterm-mode)))

;; display more on the status bar
(display-time-mode 1)
(column-number-mode 1)

;; some minor UI improvements.
(show-paren-mode 1)
(blink-cursor-mode 0)
(add-to-list 'default-frame-alist '(right-fringe . 0))
(add-to-list 'default-frame-alist '(cursor-color . "green"))

;; use ido-mode for quicker name matching
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-editing.el
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

*** Sync clipboard content with X11

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-editing.el
(setq select-enable-primary t)
(setq select-enable-clipboard t)
#+END_SRC

*** Disable menubar, toolbar, etc.

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-editing.el
;; disable menubar
(menu-bar-mode 0)

;; disable scrollbar; emacs-nox has no scroll-bar-mode
(when (functionp 'scroll-bar-mode)
  (scroll-bar-mode 0))

;; disable toolbar; emacs-nox has no tool-bar-mode
(when (functionp 'tool-bar-mode)
  (tool-bar-mode 0))
#+END_SRC

*** Use unique buffer names

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-editing.el
;; uniquify is a builtin package.
(use-package uniquify
  :config
  (setq uniquify-buffer-name-style 'forward))
#+END_SRC

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-editing.el
;; (use-package desktop
;;   :config
;;   (setq desktop-save 1)
;;   (setq desktop-load-locked-desktop t)
;;   (setq desktop-dirname user-emacs-directory)
;;   (setq desktop-restore-frames nil)
;;   (setq desktop-files-not-to-save "\\(^/[^/:]*:\\|(ftp)$\\)\\|\\(\\.gpg$\\)")
;;   (desktop-save-mode 1))
#+END_SRC

*** Enhance M-x to allow easier execution of commands

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-editing.el
(use-package smex
  :ensure t
  :config
  (setq smex-save-file (concat user-emacs-directory ".smex-items"))
  (smex-initialize)
  :bind ("M-x" . smex))
#+END_SRC

*** Add bash-completion to shell-command line in minibuffer

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-editing.el
(use-package bash-completion
  :ensure t
  :config
  (add-hook 'shell-dynamic-complete-functions 'bash-completion-dynamic-complete))
#+END_SRC

*** Reuse same window for the temporary buffers

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-editing.el
(defun left-most-window ()
  "Return the left-most window in the current frame."
  (let ((leftmost-window (selected-window)))
    (walk-windows
     (lambda (win)
       (when (< (car (window-edges win))
                (car (window-edges leftmost-window)))
         (setq leftmost-window win)))
     'nomini 'frame)
    leftmost-window))

(defun display-buffer-in-leftmost-window (buffer alist)
  "Display BUFFER in the leftmost window, creating a new one if necessary."
  (let ((leftmost-window (left-most-window)))
    (message "using custom display-buffer-in-leftmost-window")
    (if leftmost-window
        (set-window-buffer leftmost-window buffer)
      (split-window nil nil 'left))
    leftmost-window))

(setq display-buffer-alist
      '(
        ;; Anatomy of an entry.
        ;; (BUFFER-MATCHER
        ;;  LIST-OF-DISPLAY-FUNCTIONS
        ;;  &optional PARAMETERS)

        ((or "\\*godoc .*" "\\magit: .*")
         (display-buffer-in-leftmost-window))

        ((rx (| "*compilation*" "*Async Shell Command*" "*xref*" "*grep*"
                 "*Help*" "*Occur*" "*Apropos*" "*Backtrace*"))
         (display-buffer-in-leftmost-window))
        ))
#+END_SRC

** Frame font

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-fonts.el
(defvar my-font-size 24 "Initial font size for the frames")
(defvar my-font-step-size 2 "Font increment/decrement size")
(defvar my-font-name "Ubuntu Sans Mono")
(defvar my-variable-font-name "Ubuntu Sans Mono")

(defun my-font-name (size)
  "Returns the font name for the given size."
  (format "%s-%d" my-font-name size))
(defun my-variable-font-name (size)
  "Returns the variable-pitch font name for the given size."
  (format "%s-%d" my-variable-font-name size))

(defun my-font-increase ()
  "Updates the frame font with a larger font size."
  (interactive)
  (progn (setq my-font-size (+ my-font-size my-font-step-size))
         (set-face-font 'default (my-font-name my-font-size))
         (set-face-font 'fixed-pitch (my-font-name my-font-size))
         (set-face-font 'variable-pitch (my-variable-font-name my-font-size))
         (set-frame-font (my-font-name my-font-size) nil t t)))

(defun my-font-decrease ()
  "Updates the frame font with a smaller font size."
  (interactive)
  (progn (setq my-font-size (- my-font-size my-font-step-size))
         (set-face-font 'default (my-font-name my-font-size))
         (set-face-font 'fixed-pitch (my-font-name my-font-size))
         (set-face-font 'variable-pitch (my-variable-font-name my-font-size))
         (set-frame-font (my-font-name my-font-size) nil t t)))

(set-face-font 'default (my-font-name my-font-size))
(set-face-font 'fixed-pitch (my-font-name my-font-size))
(set-face-font 'variable-pitch (my-variable-font-name my-font-size))
#+END_SRC

** Shell Search PATH

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-shell-env.el
;; Prepend ~/bin and ~/go/bin to the emacs PATH environment variable.
(setenv "PATH"
        (concat (getenv "HOME") "/bin" ":"
                (getenv "HOME") "/go/bin" ":"
                (getenv "PATH")))
;; Emacs uses exec-path instead of the PATH
(setq exec-path (split-string (getenv "PATH") ":"))

;; Also, update the tramp-default-remote-path.
(setq tramp-default-remote-path "~/bin:~/go/bin:/bin:/usr/bin")


(if (file-exists-p "/usr/lib/x86_64-linux-gnu/emacs-libvterm/vterm-module.so")
    (use-package vterm
      :ensure t
      :init
      :load-path  "/usr/lib/x86_64-linux-gnu/emacs-libvterm"))
#+END_SRC

** GnuPG and Passwords config
*** Use ~~/.authinfo.gpg~ for passwords

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-gpg.el
(setq auth-source-debug t)
(setq auth-sources '("~/.authinfo.gpg"))
#+END_SRC

*** Ask for GPG password in Emacs

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-gpg.el
;; pinentry is a builtin package
(use-package pinentry
  :config
  (pinentry-start)
  (setenv "GPG_AGENT_INFO" nil)
  (setenv "INSIDE_EMACS" (format "%s,comint" emacs-version)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-gpg.el
;; epa-file is a builtin package
(require 'epa-file)
(epa-file-enable)
(setq epg-pinentry-mode 'loopback)
#+END_SRC

** Emacs Package Repositories

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-emacs-repos.el
(require 'package)
(add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("org"   . "https://orgmode.org/elpa/"))
(package-initialize)
#+END_SRC

We use ~use-package~ to load and configure Emacs packages.

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-emacs-repos.el
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-and-compile
  (setq use-package-always-ensure t
        use-package-expand-minimally t))
#+END_SRC

This ~use-package~ package has many helper /tags/, but the most
important of them are ~:init~ and ~:config~. The following example
describes some tags usage.

#+BEGIN_SRC emacs-lisp
(use-package <pkg-name>
  :disabled ; disables this package configuration

  :requires (pkg1 pkg2 pkg3) ; pkg-name requires pkg1, pkg2, pkg3

  :init ; following code is run *before* pkg-name is loaded

  ;; code

  :config ; following code is run *after* pkg-name is loaded

  ;; code

  :bind ; custom keybindings for the pkg-name

  ;; list of key bindings

  ;; Following adds pkg-name-mini-mode to foo-mode-hook and bar-mode-hook
  :hook
  ((foo-mode bar-mode) . pkg-name-mini-mode)
  )
#+END_SRC

** Email with Mu4e

Following configuration uses ~bogofilter~ tool to mark an email as spam or
ham. Keybindings to mark an email as spam (or ham) are available in the
~mu4e-headers~ view with keys ~a-S~ and ~a-h~ respectively.

We need to run the following commands to rebuild the ~mu~ index database, if
the ~~Mail~ directory is copied into a new host or from backup:

#+BEGIN_SRC
mbsync -a
mu init --maildir=$HOME/Mail --my-address=bvkchaitanya@gmail.com --my-address=bvk.other@gmail.com
mu index
#+END_SRC

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-email.el
(if (file-exists-p "/usr/share/emacs/site-lisp/elpa-src/mu4e-1.8.14")
    (add-to-list 'load-path "/usr/share/emacs/site-lisp/elpa-src/mu4e-1.8.14"))

(when (require 'mu4e nil 'noerror)
  (require 'smtpmail)
  (require 'mu4e-contrib)

  ;; Enable debug buffer if necessary.
  (setq mu4e-mu-debug t)
  (mu4e-toggle-logging)

  ;; Use bogofilter for spam detection.
  (setq mu4e-register-as-spam-cmd "bogofilter -Ns < %s")
  (setq mu4e-register-as-ham-cmd "bogofilter -Sn < %s")
  (add-to-list 'mu4e-headers-actions
               '("SMark as spam" . mu4e-register-msg-as-spam) t)
  (add-to-list 'mu4e-headers-actions
               '("hMark as ham" . mu4e-register-msg-as-ham) t)

  ;; Allow for updating mail using 'U' in the main view.
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-maildir "~/Mail")

  ;; Define custom column-type for the mu4e header lines.
  (add-to-list 'mu4e-header-info-custom
               '(:maildir-base .
                               ( :name "Directory"  ;; long name, as seen in the message-view
                                 :shortname "Dir"   ;; short name, as seen in the headers view
                                 :help "Base name of the Maildir directory" ;; tooltip
                                 :function
                                 (lambda (msg)
                                   (format "%s" (file-name-nondirectory
                                                 (mu4e-message-field msg :maildir)))))))

  (setq mu4e-headers-fields '((:human-date . 12)
                              (:flags . 6)
                              (:maildir-base . 8)
                              (:from . 22)
                              (:subject)))

  ;; Display options
  (setq mu4e-view-show-addresses 't)
  (setq mu4e-attachment-dir "~/Mail/Downloads")

  ;; Composing mail
  (setq mu4e-compose-dont-reply-to-self t)
  ;; Don't keep message buffers around
  (setq message-kill-buffer-on-exit t)

  ;; Use mu4e for sending e-mail
  (setq mail-user-agent 'mu4e-user-agent)
  (setq message-send-mail-function 'smtpmail-send-it)
  (setq smtpmail-smtp-server "smtp.gmail.com")
  (setq smtpmail-smtp-service 587)
  (setq mu4e-sent-messages-behavior 'delete)

  ;; Make sure that moving a message (like to Trash) causes the
  ;; message to get a new file name.  This helps to avoid the
  ;; dreaded "UID is N beyond highest assigned" error.
  ;; See this link for more info: https://stackoverflow.com/a/43461973
  (setq mu4e-change-filenames-when-moving t)

  ;; Set up contexts for email accounts
  (setq mu4e-contexts
        `(,(make-mu4e-context
            :name "bvkchaitanya@gmail"
            :match-func (lambda (msg)
                          (when msg
                            (string-prefix-p "/bvkchaitanya@gmail.com"
                                             (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "bvkchaitanya@gmail.com")
                    (mu4e-trash-folder . "/bvkchaitanya@gmail.com/Trash")
                    (mu4e-drafts-folder . "/bvkchaitanya@gmail.com/Drafts")
                    (mu4e-refile-folder . "/bvkchaitanya@gmail.com/Archive")))

          ,(make-mu4e-context
            :name "bvk.other@gmail"
            :match-func (lambda (msg)
                          (when msg
                            (string-prefix-p "/bvkother@gmail.com"
                                             (mu4e-message-field msg :maildir))))
            :vars '((mu4e-trash-folder . "/bvkother@gmail.com/Trash")
                    (mu4e-refile-folder . "/bvkother@gmail.com/Archive")))
          ))
  (setq mu4e-context-policy 'pick-first)

  (add-to-list 'mu4e-bookmarks
               '(:name "All Inboxes"
                 :query "maildir:/bvkchaitanya@gmail.com/Inbox OR maildir:/bvkother@gmail.com/Inbox"
                 :key ?i))

  ;; DONT Start mu4e in the background cause it asks for password
  ;; immediately and conflicts with the exwm setup. It should only be
  ;; started manually.
                                        ;(mu4e t)
  )
#+END_SRC

** IRC Config

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-irc.el
(use-package circe
  :commands circe

  :preface
  (defun my-circe-count-nicks ()
    "Display the number of users connected on the current channel."
    (interactive)
    (when (eq major-mode 'circe-channel-mode)
      (message "%i users are online on %s."
               (length (circe-channel-nicks)) (buffer-name))))

  (defun my-circe-nickserv-password (server)
    "Fetch the NickServ password for the Libera Chat."
    (require 'auth-source)
    (auth-source-pick-first-password :host server :user "bvk"))

  :custom
  (circe-default-part-message nil)
  (circe-default-quit-message nil)
  (circe-format-say (format "{nick:+%ss}: {body}" 8))
  (circe-network-options
   '(("Libera Chat"
      :nick "bvk"
      :tls t
      :port 6697
      :server-buffer-name "Libera Chat"
      :channels (:after-auth "#emacs" "#go-nuts")
      :nickserv-password my-circe-nickserv-password)))
  (circe-reduce-lurker-spam t)
  (circe-use-cycle-completion t)

  :config
  (circe-lagmon-mode)
  (enable-circe-color-nicks)
  (enable-circe-display-images))
#+END_SRC

** Spell Checking

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-spell-check.el
(use-package flyspell
  :ensure nil
  :hook ((text-mode . flyspell-mode)
         (prog-mode . flyspell-prog-mode))
  :custom
  (flyspell-default-dictionary "en_US")
  (flyspell-issue-message-flag nil)
  (flyspell-issue-welcome-flag nil))
#+END_SRC

** OrgMode config

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-orgmode.el
(use-package org
  :mode (("\\.org$" . org-mode))
  :ensure org-plus-contrib
  :config
  (setq org-directory (expand-file-name "~/org"))

  ;; TAB key in source blocks indents as per the source block major mode.
  (setq org-src-preserve-indentation nil)
  (setq org-edit-src-content-indentation 0)
  (setq org-src-tab-acts-natively t)

  ;; org-agent should not change the window layout.
  (setq org-agenda-window-setup 'current-window)

  ;; org-capture config.
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/org/tasks.org" "Tasks")
           "* TODO %?\n  %i\n  %a")

          ("n" "Note" entry (file+datetree "~/org/notes.org")
           "* %?\nEntered on %U\n  %i\n  %a")))
  )
#+END_SRC

*** Enable async mode for ~org-babel-tangle~

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-orgmode.el
;; ob-async package enables asynchronous execution of org-babel code
;; blocks using the :async tag.
(use-package ob-async
  :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-orgmode.el
(defun my-org-capture-note ()
  "Open org-capture for a note."
  (interactive)
  (require 'org)
  (org-capture nil "n"))
(defun my-org-capture-task ()
  "Open org-capture for a task."
  (interactive)
  (require 'org)
  (org-capture nil "t"))
#+END_SRC

** Manage Git repos with Magit

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-magit.el
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status)))
#+END_SRC

** Use GNU Global for TAGS

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-gtags.el
;(unless (package-installed-p 'ggtags)
;  (package-install 'ggtags))
;(require 'ggtags)
#+END_SRC

** C/C++ config
#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-cc.el
(defun my-cc-mode-hook ()
  (if (featurep 'whitespace) (whitespace-mode))
  (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
    (ggtags-mode 1)))
(add-hook 'c-mode-common-hook 'my-cc-mode-hook)
#+END_SRC

** Golang config

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-golang.el
(use-package go-mode
  :mode (("\\.go$" . go-mode))
  :config
  (setq godoc-command "go doc -all")
  (setq gofmt-command "goimports")
  :hook
  (go-mode . (lambda() (add-hook 'before-save-hook 'gofmt-before-save))))
#+END_SRC

** Eglot

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-eglot.el
(use-package eglot
  :ensure t
  :hook ((go-mode) . eglot-ensure))
#+END_SRC

** Keybindings
*** Disable C-z key

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-keybindings.el
(global-unset-key (kbd "C-z"))
#+END_SRC

*** Use custom font resizing commands

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-keybindings.el
;; Increase/decrease frame font size.
(global-set-key (kbd "C-x C-=") 'my-font-increase)
(global-set-key (kbd "C-x C--") 'my-font-decrease)
#+END_SRC

*** Window management commands

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-keybindings.el
(require 'windmove)
(windmove-default-keybindings)

(require 'winner)
(setq winner-dont-bind-my-keys t)
(winner-mode)
#+END_SRC

*** Paste with mouse middle click

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-keybindings.el
(global-set-key (kbd "<mouse-2>") 'clipboard-yank)
#+END_SRC

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-keybindings.el
(defun my-x11-internet-browser ()
  "Open internet browser program."
  (interactive)
  (start-process "internet-browser" "*internet-browser*" "google-chrome"))
(defun my-x11-open-terminal ()
  "Open new X11 terminal program."
  (interactive)
  (if (get-buffer "st-256color")
      (switch-to-buffer "st-256color")
    (start-process "terminal" "*Messages*" "st"
                   "-f" (my-font-name my-font-size)
                   "-e" "bash")))
(defun my-x11-open-xephyr () ;; FIXME: Attache the sawfish startup script.
  "Open Xephyr window with sawfish."
  (interactive)
  (start-process "Xephyr" "*Messages*"
                 "xinit" "/home/bvk/config/xephyr/sawfish"
                 "--"
                 "/usr/bin/Xephyr"
                 ":1"
                 "-no-host-grab"
                 "-resizeable"))
(defun my-x11-take-screenshot ()
  "Take screenshot into a png file."
  (interactive)
  (let* ((name (format-time-string "~/screenshot-%Y%m%d%H%M%S.png")))
    (start-process "screenshot" "*Messages*"
                   "bash" "-c" (concat "xwd -silent -root|convert xwd:- " name))))
(defun my-x11-lock-screen ()
  "Run slock to lock the screen."
  (interactive)
  (start-process "slock" "*Messages*" "slock"))
#+END_SRC

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ~/.emacs.d/my-keybindings.el
(use-package transient
  :ensure t
  :config
  ;; transient popup buffer is displayed at the bottom of current window.
  (setq transient-display-buffer-action '(display-buffer-below-selected))

  ;; transient popup buffer is displayed after 5 seconds.
  (setq transient-show-popup 5))

(transient-define-prefix my-keybindings-transient()
  "Launch menu with custom keybindings."
  :transient-non-suffix 'transient--do-quit-one
  ["Operations"
   ["Emacs Operations"
    ("c" "Compile" compile)
;    ("g" "Magit Status" magit-status)
;    ("o" "Switch EXWM Workspace" exwm-workspace-switch)
    ("K" "Kill Emacs" save-buffers-kill-emacs)]

;   ["External Programs"
;    ("t" "Open Terminal" my-x11-open-terminal)
;    ("i" "Internet Browser" my-x11-internet-browser)
;    ("S" "Take Screenshot" my-x11-take-screenshot)
;    ("X" "Open Xephr Environment" my-x11-open-xephyr)
;    ("L" "Lock Screen" my-x11-lock-screen)]

   ["Orgmode Operations"
    ("A" "Show Agenda" org-agenda)
    ("N" "Capture Note" my-org-capture-note)
    ("T" "Capture Note" my-org-capture-task)]])
(global-set-key (kbd "C-c k") #'my-keybindings-transient)
#+END_SRC

* Email
** Receive GMail over IMAP with =mbsync=
   #+BEGIN_SRC conf :tangle ~/.mbsyncrc
   IMAPAccount bvkchaitanya@gmail.com
   Host imap.gmail.com
   User bvkchaitanya@gmail.com
   #PassCmd "gpg -q --for-your-eyes-only --no-tty -d ~/.authinfo.gpg | awk '/machine imap.gmail.com login bvkchaitanya@gmail.com/ {print $6}'"
   PassCmd "eval echo `emacsclient -e '(auth-source-pick-first-password :host \"imap.gmail.com\" :user \"bvkchaitanya@gmail.com\")'`"
   AuthMechs LOGIN
   SSLType IMAPS
   SSLVersions TLSv1.2
   #CertificateFile /usr/local/etc/openssl@1.1/cert.pem

   MaildirStore bvkchaitanya-gmail-local
   Path ~/Mail/bvkchaitanya@gmail.com/
   Inbox ~/Mail/bvkchaitanya@gmail.com/Inbox
   SubFolders Verbatim

   IMAPStore bvkchaitanya-gmail-remote
   Account bvkchaitanya@gmail.com

   Channel bvkchaitanya-gmail-inbox
   Master :bvkchaitanya-gmail-remote:"INBOX"
   Slave :bvkchaitanya-gmail-local:"INBOX"
   CopyArrivalDate yes
   Create Both
   Expunge Both
   SyncState *

   Channel bvkchaitanya-gmail-trash
   Master :bvkchaitanya-gmail-remote:"[Gmail]/Trash"
   Slave :bvkchaitanya-gmail-local:"Trash"
   CopyArrivalDate yes
   Create Both
   Expunge Both
   SyncState *

   Channel bvkchaitanya-gmail-spam
   Master :bvkchaitanya-gmail-remote:"[Gmail]/Spam"
   Slave :bvkchaitanya-gmail-local:"Spam"
   CopyArrivalDate yes
   Create Both
   Expunge Both
   SyncState *

   Channel bvkchaitanya-gmail-all
   Master :bvkchaitanya-gmail-remote:"[Gmail]/All Mail"
   Slave :bvkchaitanya-gmail-local:"Archive"
   CopyArrivalDate yes
   Create Both
   Expunge Both
   SyncState *

   Channel bvkchaitanya-gmail-drafts
   Master :bvkchaitanya-gmail-remote:"[Gmail]/Drafts"
   Slave :bvkchaitanya-gmail-local:"Drafts"
   CopyArrivalDate yes
   Create Both
   Expunge Both
   SyncState *

   Group bvkchaitanya-gmail
   Channel bvkchaitanya-gmail-inbox
   Channel bvkchaitanya-gmail-trash
   Channel bvkchaitanya-gmail-all
   Channel bvkchaitanya-gmail-spam
   Channel bvkchaitanya-gmail-drafts
   #+END_SRC

   #+BEGIN_SRC conf :tangle ~/mbsync-bvkother-gmail
   IMAPAccount bvk.other@gmail.com
   Host imap.gmail.com
   User bvk.other@gmail.com
   PassCmd "gpg -q --for-your-eyes-only --no-tty -d ~/.authinfo.gpg | awk '/machine imap.gmail.com login bvk.other@gmail.com/ {print $6}'"
   AuthMechs LOGIN
   SSLType IMAPS
   SSLVersions TLSv1.2
   #CertificateFile /usr/local/etc/openssl@1.1/cert.pem

   MaildirStore bvkother-gmail-local
   Path ~/Mail/bvk.other@gmail.com/
   Inbox ~/Mail/bvk.other@gmail.com/Inbox
   SubFolders Verbatim

   IMAPStore bvkother-gmail-remote
   Account bvk.other@gmail.com

   Channel bvkother-gmail-inbox
   Master :bvkother-gmail-remote:"INBOX"
   Slave :bvkother-gmail-local:"INBOX"
   CopyArrivalDate yes
   Create Both
   Expunge Both
   SyncState *

   Channel bvkother-gmail-trash
   Master :bvkother-gmail-remote:"[Gmail]/Trash"
   Slave :bvkother-gmail-local:"Trash"
   CopyArrivalDate yes
   Create Both
   Expunge Both
   SyncState *

   Channel bvkother-gmail-spam
   Master :bvkother-gmail-remote:"[Gmail]/Spam"
   Slave :bvkother-gmail-local:"Spam"
   CopyArrivalDate yes
   Create Both
   Expunge Both
   SyncState *

   Channel bvkother-gmail-all
   Master :bvkother-gmail-remote:"[Gmail]/All Mail"
   Slave :bvkother-gmail-local:"Archive"
   CopyArrivalDate yes
   Create Both
   Expunge Both
   SyncState *

   Channel bvkother-gmail-drafts
   Master :bvkother-gmail-remote:"[Gmail]/Drafts"
   Slave :bvkother-gmail-local:"Drafts"
   CopyArrivalDate yes
   Create Both
   Expunge Both
   SyncState *

   Group bvkother-gmail
   Channel bvkother-gmail-inbox
   Channel bvkother-gmail-trash
   Channel bvkother-gmail-all
   Channel bvkother-gmail-spam
   Channel bvkother-gmail-drafts
   #+END_SRC

* X11 Setup
** =~/.Xresources=
*** XTerm

#+BEGIN_SRC text :tangle ~/.Xresources
selectToClipboard: true
#+END_SRC

#+BEGIN_SRC text :tangle ~/.Xresources
xterm*metaSendsEscape: true
xterm*allowSendEvents: true
xterm*on2Clicks: regex [^/@ \n]+
xterm*on3Clicks: regex [^ \n]+
xterm*on4Clicks: regex [^#$]+
xterm*on5Clicks: line
#+END_SRC

*** URxvt

#+BEGIN_SRC text :tangle ~/.Xresources
URxvt.internalBorder:  0
URxvt.scrollBar: False
URxvt.perl-ext-common: tabbed,font-size
#+END_SRC

*** XFT settings

The following settings give Mac OS X like font-rendering.

#+BEGIN_SRC text :tangle ~/.Xresources
Xft.dpi: 96
Xft.antialias: true
Xft.hinting: true
Xft.rgba: rgb
Xft.autohint: false
Xft.hintstyle: hintslight
Xft.lcdfilter: lcddefault
#+END_SRC

*** Solarized theme for Xterm.

#+BEGIN_SRC text :notangle ~/.Xresources
#define S_base03        #002b36
#define S_base02        #073642
#define S_base01        #586e75
#define S_base00        #657b83
#define S_base0         #839496
#define S_base1         #93a1a1
#define S_base2         #eee8d5
#define S_base3         #fdf6e3

,*background:            S_base03
,*foreground:            S_base0
,*fadeColor:             S_base03
,*cursorColor:           S_base1
,*pointerColorBackground:S_base01
,*pointerColorForeground:S_base1

#define S_yellow        #b58900
#define S_orange        #cb4b16
#define S_red           #dc322f
#define S_magenta       #d33682
#define S_violet        #6c71c4
#define S_blue          #268bd2
#define S_cyan          #2aa198
#define S_green         #859900

!! black dark/light
,*color0:                S_base02
,*color8:                S_base03

!! red dark/light
,*color1:                S_red
,*color9:                S_orange

!! green dark/light
,*color2:                S_green
,*color10:               S_base01

!! yellow dark/light
,*color3:                S_yellow
,*color11:               S_base00

!! blue dark/light
,*color4:                S_blue
,*color12:               S_base0

!! magenta dark/light
,*color5:                S_magenta
,*color13:               S_violet

!! cyan dark/light
,*color6:                S_cyan
,*color14:               S_base1

!! white dark/light
,*color7:                S_base2
,*color15:               S_base3
#+END_SRC

** ~~/.sxhkdrc~

Package ~sxhkd~ provides an X11 hotkey daemon. We use it to open the program
launcher. We prepare the config file here and start the daemon from
~~/.xsession~ file.

#+BEGIN_SRC conf :mkdirp yes :tangle ~/.config/sxhkd/sxhkdrc
# Reload the hotkey daemon
super + shift + r
	pkill -usr1 -x sxhkd

super + r
	dmenu_run

super + e
  emacs

super + f
  firefox-esr

super + t
	xterm -fa xft:'UbuntuSansMono-14'

super + l
  slock

XF86Display
	adjust-xrandr --display-order "$XRANDR_DISPLAY_ORDER1"

super + XF86Display
	adjust-xrandr --display-order "$XRANDR_DISPLAY_ORDER2"

XF86AudioLowerVolume
  pactl -- set-sink-volume @DEFAULT_SINK@ -10%

XF86AudioRaiseVolume
  pactl -- set-sink-volume @DEFAULT_SINK@ +10%

XF86AudioMute
  pactl -- set-sink-mute @DEFAULT_SINK@ toggle
#+END_SRC

** =~/.xsession=

#+BEGIN_SRC bash :tangle ~/.xsession
#!/bin/bash
source $HOME/.bashrc
#+END_SRC

#+BEGIN_SRC bash :tangle ~/.xsession
# Enable/Disable DPMS (Energy Star) features.
xset +dpms

# Enable/Disable blank the video device.
# xset s noblank

# Enable/Disable the screensaver.
xset s 600

# Use slock as the screen lock.
xss-lock slock &

# Enable/Disable access control.
# xhost +SI:localuser:$USER
#+END_SRC

#+BEGIN_SRC bash :tangle ~/.xsession
# Start ssh-agent.
eval $(ssh-agent -s)
#+END_SRC

#+BEGIN_SRC bash :tangle ~/.xsession
xrdb -merge ~/.Xresources
if test -f $HOME/.Xresources-$HOSTNAME; then
  xrdb -merge $HOME/.Xresources-$HOSTNAME
fi
#+END_SRC

Configure the background wallpaper.

#+BEGIN_SRC bash :tangle ~/.xsession
if test -f $HOME/.wallpaper/blank.jpg; then
  feh --bg-scale ${HOME}/.wallpaper/blank.jpg
fi
#+END_SRC

Start the system tray with system tray apps.

#+BEGIN_SRC bash :tangle ~/.xsession
cbatticon -c 'systemctl hibernate' &
pasystray &
#+END_SRC

#+BEGIN_SRC bash :tangle ~/.xsession
if test -f $HOME/.xsession-$HOSTNAME; then
  source $HOME/.xsession-$HOSTNAME
fi
#+END_SRC

#+BEGIN_SRC bash :tangle ~/.xsession
# Run the hotkey daemon in background.
sxhkd -c $HOME/.config/sxhkd/sxhkdrc &
#+END_SRC

#+BEGIN_SRC bash :tangle ~/.xsession
# Start either the custom window manager or the default one.
if test -f $HOME/bin/dwm; then
  while true; do xsetroot -name "$(date)"; sleep 5; done &

  while true; do
    $HOME/bin/dwm;
    cbatticon -c 'systemctl hibernate' &
    pasystray &
  done
else
  exec dwm.winkey
fi
#+END_SRC

*** =~/.xsession-steam=

#+BEGIN_SRC bash :tangle ~/.xsession-steam
# Use custom DPI for the 4k, 24" monitor
xandr --dpi 184
#+END_SRC

*** =~/.xsession-gold=

Enable tap-to-click functionality on the touchpad. See ~xinput list~ and
~xinput list-props~ commands to see all available devices and options for each
device respectively.

#+BEGIN_SRC bash :tangle ~/.xsession-gold
xinput set-prop "ELAN067B:00 04F3:31F8 Touchpad" "libinput Tapping Enabled" 1
xinput set-prop "ELAN067B:00 04F3:31F8 Touchpad" "libinput Click Method Enabled" 0 0
#+END_SRC

* Footnotes
** COMMENT Local variables [must be the last block]
Configure a buffer-local after-save-hook to tangle the code blocks
when this file is saved.
** TODO Find out how to run tangle asynchronously

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
;; End:
